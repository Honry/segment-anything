{"version":3,"file":"ort.webgpu.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/wasm/binding/ort-wasm-simd-threaded.jsep.js","webpack://ort/./lib/wasm/binding/ort-wasm-simd.jsep.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nlet logLevelValue = 'warning';\nexport const env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { env as envImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = envImpl;\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        if (options.tensorLayout === 'NHWC') {\n            throw new Error('NHWC Tensor layout is not supported yet');\n        }\n        const { height, width } = options;\n        const norm = options.norm ?? { mean: 255, bias: 0 };\n        let normMean;\n        let normBias;\n        if (typeof (norm.mean) === 'number') {\n            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n        }\n        else {\n            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n        }\n        if (typeof (norm.bias) === 'number') {\n            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n        }\n        else {\n            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const stride = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = stride * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = stride;\n            rTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isString = typeof image === 'string';\n        let data;\n        let tensorConfig = options ?? {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.height;\n                let width = image.width;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                pixels2DContext.drawImage(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isString) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toDataURL(options) {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.dims[3];\n        canvas.height = this.dims[2];\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            let width;\n            let height;\n            if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n                width = this.dims[2];\n                height = this.dims[3];\n            }\n            else { // Default layout is NCWH\n                width = this.dims[3];\n                height = this.dims[2];\n            }\n            const inputformat = options?.format !== undefined ? options.format : 'RGB';\n            const norm = options?.norm;\n            let normMean;\n            let normBias;\n            if (norm === undefined || norm.mean === undefined) {\n                normMean = [255, 255, 255, 255];\n            }\n            else {\n                if (typeof (norm.mean) === 'number') {\n                    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n                }\n                else {\n                    normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                    if (norm.mean[3] !== undefined) {\n                        normMean[3] = norm.mean[3];\n                    }\n                }\n            }\n            if (norm === undefined || norm.bias === undefined) {\n                normBias = [0, 0, 0, 0];\n            }\n            else {\n                if (typeof (norm.bias) === 'number') {\n                    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n                }\n                else {\n                    normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                    if (norm.bias[3] !== undefined) {\n                        normBias[3] = norm.bias[3];\n                    }\n                }\n            }\n            const stride = height * width;\n            // Default pointer assignments\n            let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n                aTensorPointer = stride * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = stride;\n                gTensorPointer = stride * 2;\n            }\n            for (let i = 0; i < height; i++) {\n                for (let j = 0; j < width; j++) {\n                    const R = (this.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                    const G = (this.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                    const B = (this.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                    const A = aTensorPointer === -1 ?\n                        255 :\n                        (this.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                    pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                    pixels2DContext.fillRect(j, i, 1, 1);\n                }\n            }\n            return canvas.toDataURL();\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    toImageData(options) {\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            let width;\n            let height;\n            let channels;\n            if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n                width = this.dims[2];\n                height = this.dims[1];\n                channels = this.dims[3];\n            }\n            else { // Default layout is NCWH\n                width = this.dims[3];\n                height = this.dims[2];\n                channels = this.dims[1];\n            }\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const norm = options?.norm;\n            let normMean;\n            let normBias;\n            if (norm === undefined || norm.mean === undefined) {\n                normMean = [255, 255, 255, 255];\n            }\n            else {\n                if (typeof (norm.mean) === 'number') {\n                    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n                }\n                else {\n                    normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                    if (norm.mean[3] !== undefined) {\n                        normMean[3] = norm.mean[3];\n                    }\n                }\n            }\n            if (norm === undefined || norm.bias === undefined) {\n                normBias = [0, 0, 0, 0];\n            }\n            else {\n                if (typeof (norm.bias) === 'number') {\n                    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n                }\n                else {\n                    normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                    if (norm.bias[3] !== undefined) {\n                        normBias[3] = norm.bias[3];\n                    }\n                }\n            }\n            const stride = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n                aTensorPointer = stride * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = stride;\n                gTensorPointer = stride * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                image.data[aImagePointer] = aTensorPointer === -1 ?\n                    255 :\n                    (this.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float16':\n        return onnx.TensorProto.DataType.FLOAT16;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {configureLogger, LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(env: Env): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    return new Float32Array(this.module.HEAP8.buffer, this.data, ShapeUtil.size(this.dims));\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\n    }\n    const backend = new WebGpuBackend();\n    await backend.initialize(env);\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel|undefined;\nlet debug: boolean|undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n    // GPU copy\n    this.backend.getCommandEncoder().copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: cachedData.originalSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, cachedData.originalSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['Relu', [unaryOps.relu]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'uint16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  await initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  // init JSEP if available\n  await initJsep(getInstance(), env);\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          throw new Error('Can\\'t create a tensor');\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode === 0) {\n        for (let i = 0; i < outputCount; i++) {\n          const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n          const beforeGetTensorDataStack = wasm.stackSave();\n          // stack allocate 4 pointer value\n          const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n          let type: Tensor.Type|undefined, dataOffset = 0;\n          try {\n            errorCode = wasm._OrtGetTensorData(\n                tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n            if (errorCode !== 0) {\n              throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n            }\n            let tensorDataIndex = tensorDataOffset / 4;\n            const dataType = wasm.HEAPU32[tensorDataIndex++];\n            dataOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n            const dims = [];\n            for (let i = 0; i < dimsLength; i++) {\n              dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n            }\n            wasm._OrtFree(dimsOffset);\n\n            const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n            type = tensorDataTypeEnumToString(dataType);\n            if (type === 'string') {\n              const stringData: string[] = [];\n              let dataIndex = dataOffset / 4;\n              for (let i = 0; i < size; i++) {\n                const offset = wasm.HEAPU32[dataIndex++];\n                const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n              }\n              output.push([type, dims, stringData]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                  .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data]);\n            }\n          } finally {\n            wasm.stackRestore(beforeGetTensorDataStack);\n            if (type === 'string' && dataOffset) {\n              wasm._free(dataOffset);\n            }\n            wasm._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n\n      if (errorCode === 0) {\n        return output;\n      } else {\n        throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n      }\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(wasm._OrtReleaseTensor);\n    inputAllocs.forEach(wasm._free);\n\n    wasm._OrtReleaseRunOptions(runOptionsHandle);\n    runOptionsAllocs.forEach(wasm._free);\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={838:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WebGpuBackend=void 0;const r=n(955),a=n(771),o=n(510),i=n(305);t.WebGpuBackend=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.profilingEnabled=!1}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e){if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");const n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize}};t.features.has(\\\"timestamp-query-inside-passes\\\")&&\\\"default\\\"===e.webgpu.profilingMode&&(this.profilingEnabled=!0,n.requiredFeatures=[\\\"timestamp-query-inside-passes\\\"]),this.device=await t.requestDevice(n),this.gpuDataManager=(0,a.createGpuDataManager)(this),this.programManager=new i.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,r.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},this.profilingEnabled&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2}))}dispose(){}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0}run(e,t,n,a,o){if(t.length!==e.inputTypes.length)throw new Error(`Input size must be equal to ${e.inputTypes.length}.`);const i=[];for(let e=0;e<t.length;++e){const n=this.gpuDataManager.get(t[e].data);if(!n)throw new Error(`no GPU data for input: ${t[e].data}`);i[e]=n}const s=((e,t,n)=>{const r=t.map((e=>`${e.join(\\\",\\\")}`)).join(\\\"_\\\"),a=n.join(\\\"_\\\");let o=e.name;return e.cacheHint&&(o+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),o+=\\\":\\\"+r+\\\";\\\"+a,o})(e,t.map((e=>e.dims)),i.map((e=>e.type)));let u=this.programManager.getArtifact(s);const l=u?u.programInfo:\\\"function\\\"==typeof e.get?e.get():e,c=0===n.length?l.outputs.map(((e,t)=>t)):n;if(c.length!==l.outputs.length)throw new Error(`Output size ${c.length} must be equal to ${l.outputs.length}.`);const p=[],d=[];for(let e=0;e<l.outputs.length;++e){if(!Number.isInteger(c[e])||c[e]<-2||c[e]>=l.outputs.length)throw new Error(`Invalid output index: ${c[e]}`);const t=-1===c[e],n=-2===c[e],r=t||n?o(l.outputs[e].dataType,l.outputs[e].dims):a(c[e],l.outputs[e].dataType,l.outputs[e].dims),i=this.gpuDataManager.get(r.data);if(!i)throw new Error(`no GPU data for output: ${r.data}`);if(t&&this.temporaryData.push(i),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(i)}p.push(r),d.push(i)}const f=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return u||(u=this.programManager.build(l,f),this.programManager.setArtifact(s,u)),(0,r.LOG_DEBUG)(\\\"info\\\",(()=>`[ProgramManager] run \\\"${l.name}\\\" (key=${s}) with ${f[0]}x${f[1]}x${f[2]}`)),this.programManager.run(u,i,d,f),p}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){const n=await this.gpuDataManager.download(e);t().set(new Uint8Array(n))}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n){const r=o.WEBGPU_OP_RESOLVE_RULES.get(e);if(!r)throw new Error(`kernel not implemented: ${e}`);this.kernels.set(t,[e,r[0],[r[1],n]])}releaseKernel(e){const t=this.kernelPersistentData.get(e);if(t){for(const e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t){const n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);const[a,o,i]=n;if(null!==this.currentKernelId)throw new Error(`kernel \\\"${a}\\\" is not allowed to be called recursively`);this.currentKernelId=e,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),(0,r.LOG_DEBUG)(\\\"info\\\",(()=>`[WebGPU] Start to run kernel \\\"${a}\\\"...`)),this.temporaryData=[];try{return o(t,i[1]),0}catch(e){return(0,r.LOG_DEBUG)(\\\"warning\\\",`[WebGPU] Kernel \\\"${a}\\\" failed. Error: ${e}`),1}finally{for(const e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}}},675:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.init=void 0;const r=n(917),a=n(838),o=n(955),i=n(952);class s{constructor(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}getFloat32Array(){return new Float32Array(this.module.HEAP8.buffer,this.data,i.ShapeUtil.size(this.dims))}reshape(e){if(i.ShapeUtil.size(e)!==i.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new s(this.module,this.dataType,this.data,e)}}class u{get customData(){return this.backend.currentKernelCustomData}constructor(e,t,n){this.module=e,this.backend=t;const r=e.HEAPU32;let a=n>>2;this.opKernelContext=r[a++];const o=r[a++],i=[];for(let t=0;t<o;t++){const t=r[a++],n=r[a++],o=r[a++],u=[];for(let e=0;e<o;e++)u.push(r[a++]);i.push(new s(e,t,n,u))}this.inputs=i}compute(e,t){var n,a,o;const u=null!==(a=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((e=>\\\"number\\\"==typeof e?this.inputs[e]:e)))&&void 0!==a?a:this.inputs,l=null!==(o=null==t?void 0:t.outputs)&&void 0!==o?o:[];return this.backend.run(e,u,l,((e,t,n)=>new s(this.module,t,this.output(e,n),n)),((e,t)=>{const n=(0,r.getTensorElementSize)(e);if(!n)throw new Error(`Unsupported data type: ${e}`);const a=n*i.ShapeUtil.size(t);return new s(this.module,e,this.backend.gpuDataManager.create(a).id,t)}))}output(e,t){const n=this.module.stackSave();try{const n=this.module.stackAlloc(4*(1+t.length));let r=n>>2;this.module.HEAPU32[r++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[r++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}finally{this.module.stackRestore(n)}}}t.init=async(e,t)=>{const n=e.jsepInit;if(n&&navigator.gpu){if(!t.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");const r=new a.WebGpuBackend;await r.initialize(t),n({backend:r},(e=>r.alloc(e)),(e=>r.free(e)),((t,n,a,i=!1)=>{if(i)(0,o.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${t}, dst=${n}, size=${a}`)),r.memcpy(t,n);else{(0,o.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${t}, gpuDataId=${n}, size=${a}`));const i=e.HEAPU8.subarray(t,t+a);r.upload(n,i)}}),(async(t,n,a)=>{(0,o.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${t}, dataOffset=${n}, size=${a}`)),await r.download(t,(()=>e.HEAPU8.subarray(n,n+a)))}),((e,t,n)=>r.createKernel(e,t,n)),(e=>r.releaseKernel(e)),((t,n)=>{(0,o.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepRun: kernel=${t}, contextDataOffset=${n}`));const a=new u(e,r,n);return r.computeKernel(t,a)}))}}},955:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;const r=n(917),a=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];let o,i;t.configureLogger=(e,t)=>{o=e,i=t},t.LOG=(e,t)=>{const n=(0,r.logLevelStringToEnum)(e);var i,s;n>=(0,r.logLevelStringToEnum)(o)&&(i=n,s=\\\"function\\\"==typeof t?t():t,console.log(`[${a[i]},${(new Date).toISOString()}]${s}`))},t.LOG_DEBUG=(...e)=>{i&&(0,t.LOG)(...e)}},952:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;class n{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}}t.MatMulUtil=n;class r{static calcShape(e,t,r=!1){const a=e.length,o=t.length;if(0===a)return t;if(0===o)return e;const i=Math.max(e.length,t.length),s=new Array(i);if(r){if(a<2||o<2)return;const r=n.calcMatMulShape([e[a-2],e[a-1]],[t[o-2],t[o-1]]);if(void 0===r)return;[s[i-2],s[i-1]]=r}for(let n=r?3:1;n<=i;n++){const r=a-n<0?1:e[a-n],u=o-n<0?1:t[o-n];if(r!==u&&r>1&&u>1)return;s[i-n]=Math.max(r,u)}return s}static isValidBroadcast(e,t){const n=e.length,r=t.length;if(n>r)return!1;for(let a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0}}t.BroadcastUtil=r;class a{static size(e){return a.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return a.getSizeFromDimensionRange(e,t,e.length)}static sizeToDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${e.length} dimensions.`);return a.getSizeFromDimensionRange(e,0,t)}static getSizeFromDimensionRange(e,t,n){let r=1;for(let a=t;a<n;a++){if(e[a]<=0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.\\\");r*=e[a]}return r}static computeStrides(e){const t=e.length;if(0===t)return[];if(1===t)return[1];const n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,null!=t?t:e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){const n=e.length;return e.map(((e,r)=>e+t[r]+t[r+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}}t.ShapeUtil=a;class o{static adjustPoolAttributes(e,t,n,r,a,o){if(!e&&n.length!==t.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else r.push(1);for(let e=0;e<n.length;e++)if(e<a.length){if(a[e]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else a.push(1);for(let e=0;e<2*n.length;e++)if(e<o.length){if(o[e]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else o.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(o[e]>=n[e]||o[e+n.length]>=n[e])throw new Error(\\\"pads should be smaller than kernel\\\")}}static adjustPadsBasedOnAutoPad(e,t,n,r,a,i,s){if(s){if(a.length!==2*(e.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(t.length!==e.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(r.length!==e.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(let u=0;u<e.length-2;u++)o.adjustPadAndReturnShape(e[u+(i?1:2)],t[u],n[u],r[u],a,u,u+e.length-2,s)}}static computePoolOutputShape(e,t,n,r,a,i,s){if(t.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");const u=[t[0],t[1]];return o.computeShapeHelper(e,t,u,n,r,a,i,s),u}static computeConvOutputShape(e,t,n,r,a,i,s){if(e.length<=0||t.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");const u=[e[0],t[0]];return o.computeShapeHelper(!1,e,u,n,r,a,i,s),u}static computeShapeHelper(e,t,n,r,a,i,s,u){if(e)for(let e=0;e<t.length-2;e++)n.push(1);else for(let e=0;e<t.length-2;e++)n.push(o.adjustPadAndReturnShape(t[e+2],r[e],a[e],i[e],s,e,e+t.length-2,u))}static adjustPadAndReturnShape(e,t,n,r,a,o,i,s){const u=n*(r-1)+1;if(!s||\\\"NOTSET\\\"===s)return Math.floor((e+a[o]+a[i]-u)/t+1);switch(s){case\\\"VALID\\\":return a[o]=0,a[i]=0,Math.floor((e-u)/t+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==n)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");{const n=((e+t-1)/t-1)*t+r-e;return a[o]=\\\"SAME_LOWER\\\"===s?Math.floor((n+1)/2):Math.floor(n/2),a[i]=n-a[o],Math.floor((e+n-r)/t+1)}default:throw new Error(\\\"Unsupported AutoPad type\\\")}}}t.PoolConvUtil=o,t.GemmUtil=class{static getShapeOfGemmResult(e,t,n,a,o){if(2!==e.length||2!==n.length)throw new Error(\\\"shape need to be of size 2\\\");let i,s,u;t?(i=e[1],s=e[0]):(i=e[0],s=e[1]);let l=-1;if(a?(u=n[0],l=1):(u=n[1],l=0),n[l]!==s)throw new Error(\\\"dimension mismatch\\\");if(i<=0||u<=0||s<=0)throw new Error(\\\"invalid shape specified\\\");if(o&&!r.isValidBroadcast(o,[i,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[i,u,s]}},t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createAttributeWithCacheKey=void 0;class n{constructor(e){Object.assign(this,e)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(\\\";\\\")),this._cacheKey}}t.createAttributeWithCacheKey=e=>new n(e)},771:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGpuDataManager=void 0;const r=n(955),a=n(163),o=e=>16*Math.ceil(e/16);let i=0;class s{constructor(e){this.backend=e,this.storageCache=new Map,this.downloadCache=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}upload(e,t){const n=t.buffer,a=t.byteOffset,i=t.byteLength,s=o(i),u=this.storageCache.get(e);if(!u)throw new Error(\\\"gpu data for uploading does not exist\\\");if(u.originalSize!==i)throw new Error(`inconsistent data size. gpu data size=${u.originalSize}, data size=${i}`);const l=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=l.getMappedRange();new Uint8Array(c).set(new Uint8Array(n,a,i)),l.unmap();const p=this.backend.getCommandEncoder();this.backend.endComputePass(),p.copyBufferToBuffer(l,0,u.gpuData.buffer,0,s),(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(l)}memcpy(e,t){const n=this.storageCache.get(e);if(!n)throw new Error(\\\"source gpu data for memcpy does not exist\\\");const r=this.storageCache.get(t);if(!r)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(n.originalSize!==r.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");const a=o(n.originalSize);this.backend.getCommandEncoder().copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const n=o(e),s=this.backend.device.createBuffer({size:n,usage:t}),u={id:i++,type:a.GpuDataType.default,buffer:s};return this.storageCache.set(u.id,{gpuData:u,originalSize:e}),(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${u.id}`)),u}get(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData}release(e){const t=this.storageCache.get(e);if(!t)throw new Error(\\\"releasing data does not exist\\\");return(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache.delete(e),t.originalSize}async download(e){const t=this.downloadCache.get(e);if(t)return t.data;const n=this.storageCache.get(e);if(!n)throw new Error(\\\"data does not exist\\\");const r=this.backend.getCommandEncoder();this.backend.endComputePass();const a=this.backend.device.createBuffer({size:n.originalSize,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});r.copyBufferToBuffer(n.gpuData.buffer,0,a,0,n.originalSize),this.backend.flush();const o=new Promise((e=>{a.mapAsync(GPUMapMode.READ).then((()=>{const t=a.getMappedRange().slice(0);a.destroy(),e(t)}))}));return this.downloadCache.set(e,{data:o}),o}refreshPendingBuffers(){for(const e of this.buffersForUploadingPending)e.destroy();for(const e of this.buffersPending)e.destroy()}}t.createGpuDataManager=(...e)=>new s(...e)},510:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;const i=o(n(504)),s=n(770),u=n(271),l=n(522),c=o(n(262)),p=n(625),d=o(n(302));t.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[d.abs]],[\\\"Acos\\\",[d.acos]],[\\\"Acosh\\\",[d.acosh]],[\\\"Add\\\",[i.add]],[\\\"Asin\\\",[d.asin]],[\\\"Asinh\\\",[d.asinh]],[\\\"Atan\\\",[d.atan]],[\\\"Atanh\\\",[d.atanh]],[\\\"AveragePool\\\",[c.averagePool,c.parseAveragePoolAttributes]],[\\\"Ceil\\\",[d.ceil]],[\\\"ClipV10\\\",[d.clipV10]],[\\\"Clip\\\",[d.clip]],[\\\"Conv\\\",[s.conv,s.parseConvAttributes]],[\\\"Cos\\\",[d.cos]],[\\\"Cosh\\\",[d.cosh]],[\\\"Div\\\",[i.div]],[\\\"Elu\\\",[d.elu,d.parseAlphaAttributes]],[\\\"Erf\\\",[d.erf]],[\\\"Exp\\\",[d.exp]],[\\\"Floor\\\",[d.floor]],[\\\"Gemm\\\",[u.gemm,u.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[c.globalAveragePool,c.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[c.globalMaxPool,c.parseGlobalMaxPoolAttributes]],[\\\"LeakyRelu\\\",[d.leakyRelu,d.parseAlphaAttributes]],[\\\"MatMul\\\",[l.matMul]],[\\\"MaxPool\\\",[c.maxPool,c.parseMaxPoolAttributes]],[\\\"Mul\\\",[i.mul]],[\\\"Neg\\\",[d.neg]],[\\\"Pow\\\",[i.pow]],[\\\"Reciprocal\\\",[d.reciprocal]],[\\\"Relu\\\",[d.relu]],[\\\"Sigmoid\\\",[d.sigmoid]],[\\\"Sin\\\",[d.sin]],[\\\"Sinh\\\",[d.sinh]],[\\\"Sqrt\\\",[d.sqrt]],[\\\"Sub\\\",[i.sub]],[\\\"Tan\\\",[d.tan]],[\\\"Tanh\\\",[d.tanh]],[\\\"ThresholdedRelu\\\",[d.thresholdedRelu,d.parseAlphaAttributes]],[\\\"Transpose\\\",[p.transpose,p.parseTransposeAttributes]]])},427:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=e=>{switch(e){case 1:return\\\"f32\\\";case 2:return\\\"vec2<f32>\\\";case 3:return\\\"vec3<f32>\\\";case 4:return\\\"vec4<f32>\\\";default:throw new Error(`${e}-component is not supported.`)}},t.activationFnSnippet=(e,t=!1,n=!1,r=3)=>\\\"\\\",t.biasActivationSnippet=(e,t)=>`\\\\n      ${e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\"}\\\\n      ${t?\\\"value = activation(value, coords);\\\":\\\"\\\"}\\\\n      `},456:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;const r=n(955),a=n(952),o=n(163),i=n(427),s=n(85),u=n(158);t.createConv2DMatMulProgramInfo=(e,t,n,l,c,p,d,f,h)=>{const g=\\\"NHWC\\\"===n.format,m=g?e[0].dims[3]:e[0].dims[1],v=l[0],b=g?l[2]:l[3],y=g?l[1]:l[2],w=g?l[3]:l[1],_=((m%4==0||m%3==0)&&g||b%4==0&&!g)&&w%4==0,$=g?w:b*y,S=g?b*y:w,A=_?[8,8,1]:[$<=4?4:16,$>4&&S<=4?4:16,1],C=_?[4,4,1]:[$<=4?1:2,$>4&&S<=4?1:2,1],O=[Math.ceil($/A[0]/C[0]),Math.ceil(S/A[1]/C[1]),Math.ceil(v/A[2]/C[1])];(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[conv2d_mm_webgpu] dispatch = ${O}`));const P=_?g&&m%4!=0?3:4:C[0],E=A[1]*C[1],T=A[0]*C[0],M=Math.max(A[0]*P,A[1]),x=c%E==0,R=p%T==0,k=d%M==0,D=_?[P,4,4]:[1,1,1],I=[`@group(0) @binding(0) var<storage, read> x: array<${_&&4===P?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`,`@group(0) @binding(1) var<storage, read> w: array<${_?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`];let U=`\\\\n      fn setOutputAtIndex(flatIndex : i32, value : ${_?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n        result[flatIndex] = ${_?\\\"vec4<f32>\\\":\\\"f32\\\"}(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${_?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex ${_?\\\"/ 4\\\":\\\"\\\"}, value);\\\\n      }`;return f&&(I.push(`@group(0) @binding(2) var<storage, read> bias: array<${_?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`),U+=`\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${_?\\\"vec4<f32>\\\":\\\"f32\\\"} {\\\\n          return bias[coords.${g?\\\"w\\\":\\\"y\\\"}${_?\\\"/ 4\\\":\\\"\\\"}];\\\\n        }`),Object.assign(Object.assign({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:o.GpuDataType.default}],dispatchGroup:()=>({x:O[0],y:O[1],z:O[2]}),getShaderSource:()=>`\\\\n        ${s.utilFunctions}\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        ${I.join(\\\"\\\")}\\\\n        @group(0) @binding(${I.length}) var<storage, read_write> result: array<${_?\\\"vec4<f32>\\\":\\\"f32\\\"}>;\\\\n        //@group(0) @binding(${I.length+1}) var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(\\\",\\\")});\\\\n        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(\\\",\\\")});\\\\n        const outShape : vec4<i32> = vec4<i32>(${l.join(\\\",\\\")});\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(${a.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\")});\\\\n        const filterDims : vec2<i32> = vec2<i32>(${n.kernelShape[0]}, ${n.kernelShape[1]});\\\\n        const pad : vec2<i32> = vec2<i32>(${n.pads[0]}, ${n.pads[1]});\\\\n        const stride : vec2<i32> = vec2<i32>(${n.strides[0]}, ${n.strides[1]});\\\\n        const dilation : vec2<i32> = vec2<i32>(${n.dilations[0]}, ${n.dilations[1]});\\\\n        const dimAOuter : i32 = ${c};\\\\n        const dimBOuter : i32 = ${p};\\\\n        const dimInner : i32 = ${d};\\\\n        ${U}\\\\n        ${((e,t,n,r,a=!1,o,s=!1,u=4,l=4,c=4)=>{const p=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",d=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",f=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",h=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",g=e?\\\"row\\\":\\\"col\\\",m=e?\\\"col\\\":\\\"row\\\",v=`\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = ${e?\\\"outShape[2]\\\":\\\"outShape[3]\\\"};\\\\n    let outRow = ${g} / outWidth;\\\\n    let outCol = ${g} % outWidth;\\\\n\\\\n    let WRow = ${m} / (filterDims[1] * inChannels);\\\\n    let WCol = ${m} / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = ${m} % inChannels;\\\\n    var resData = ${(0,i.typeSnippet)(u)}(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {\\\\n      ${p}\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      ${(e=>{switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\";case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u)}\\\\n    }\\\\n    return resData;`,b=e?t&&r?`\\\\n    let col = colIn * ${u};\\\\n    ${v}`:`\\\\n    let col = colIn * ${u};\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      ${v}\\\\n    }\\\\n    return ${(0,i.typeSnippet)(u)}(0.0);`:r&&n?`\\\\n    let col = colIn * ${u};\\\\n    ${v}`:`\\\\n    let col = colIn * ${u};\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      ${v}\\\\n    }\\\\n    return ${(0,i.typeSnippet)(u)}(0.0);`,y=`${(e=>{switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(l)}`,w=(0,i.typeSnippet)(c),_=e?(0,i.typeSnippet)(u):(0,i.typeSnippet)(l),$=e?(0,i.typeSnippet)(l):(0,i.typeSnippet)(u);return`\\\\n    ${(0,i.activationFnSnippet)(o,s,4===c,4)}\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${_} {\\\\n      ${e?b:y}\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${$} {\\\\n      ${e?y:b}\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${w}) {\\\\n      let col = colIn * ${c};\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = ${e?\\\"outShape[2]\\\":\\\"outShape[3]\\\"};\\\\n      ${d}\\\\n      ${(0,i.biasActivationSnippet)(a,o)}\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }`})(g,x,R,k,f,void 0,!1,D[0],D[1],D[2])}\\\\n            ${_?(0,u.makeMatMulPackedVec4Source)(C,A,!g,M):(0,u.makeMatMulPackedSource)(C,A,!g,M,!1,void 0,h)}`})}},85:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0,t.makeMatMulPackedVec4Source=(e,t,n=!1,r=32,a=!1,o=32,i=!1)=>{const s=t[1]*e[1],u=t[0]*e[0],l=n?s:r,c=n?r:s,p=l/t[0],d=r/t[1];if((!n||4!==p||4!==e[1])&&(n||3!==p&&4!==p)||l%t[0]!=0||r%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${n} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\\\\n      Otherwise, innerElementSize ${p} must be 3 or 4.\\\\n  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\\\\nvar<workgroup> mm_Asub : array<array<vec${p}<f32>, ${l/p}>, ${c}>;\\\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/e[0]}>, ${r}>;\\\\n\\\\nconst rowPerThread = ${e[1]};\\\\nconst colPerThread = ${e[0]};\\\\nconst innerElementSize = ${p};\\\\nconst tileInner = ${r};\\\\n\\\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = ${i?\\\"0\\\":\\\"localRow * rowPerThread\\\"};\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow = ${i?\\\"0\\\":\\\"i32(globalId.y) * rowPerThread\\\"};\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = ${a?\\\"0\\\":\\\"i32(globalId.z)\\\"};\\\\n  let globalRowStart = i32(workgroupId.y) * ${s};\\\\n\\\\n  let numTiles = ${a?`${Math.ceil(o/r)}`:\\\"(dimInner - 1) / tileInner + 1\\\"};\\\\n  var kStart = ${a?`i32(globalId.z) * ${o}`:\\\"0\\\"};\\\\n\\\\n  var acc: array<vec4<f32>, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * ${d};\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          ${f=n,f?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol);\\\\n        \\\":\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol);\\\\n        \\\"}\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          ${3===p?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\"}\\\\n\\\\n          ${((e,t)=>e?`\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        ${3===t?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\"}\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          ${3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\"}\\\\n        }`:`\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          ${3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\"}\\\\n        }`)(n,p)}\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}`;var f};const n=e=>e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol);\\\\n            \\\":\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol);\\\\n            \\\";t.makeMatMulPackedSource=(e,t,r=!1,a=32,o=!1,i=32,s=!1)=>{const u=e[1]*t[1],l=e[0]*t[0],c=r?u:a,p=r?a:u;if(p%t[1]!=0||c%t[0]!=0||a%t[1]!=0)throw new Error(`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`);const d=p/t[1],f=c/t[0],h=a/t[1],g=s?`\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * ${u};\\\\n    let globalColStart = i32(workgroupId.x) * ${l};\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {\\\\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\\\\n          ${n(r)}\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {\\\\n            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol);\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<f32, colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = ${r?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    `:`\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * ${u};\\\\n\\\\nlet tileRowA = i32(localId.y) * ${d};\\\\nlet tileColA = i32(localId.x) * ${f};\\\\nlet tileRowB = i32(localId.y) * ${h};\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      ${n(r)}\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol);\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<f32, colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      ${(e=>e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\")(r)}\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n`;return`\\\\n  var<workgroup> mm_Asub : array<array<f32, ${c}>, ${p}>;\\\\n  var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${a}>;\\\\n  const rowPerThread = ${e[1]};\\\\n  const colPerThread = ${e[0]};\\\\n  const tileInner = ${a};\\\\n\\\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = ${o?\\\"0\\\":\\\"i32(globalId.z)\\\"};\\\\n    let numTiles = ${o?`${Math.ceil(i/a)}`:\\\"(dimInner - 1) / tileInner + 1\\\"};\\\\n    var kStart = ${o?`i32(globalId.z) * ${i}`:\\\"0\\\"};\\\\n\\\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    ${g}\\\\n  }\\\\n`}},504:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.sub=t.pow=t.mul=t.div=t.add=void 0;const r=n(952),a=n(163),o=n(75),i=(e,t,n,i,s)=>{const u={name:t,inputTypes:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s};return Object.assign(Object.assign({},u),{get:()=>((e,t,n,i,s,u=t.dataType)=>{var l,c;const p=!r.ShapeUtil.areEqual(t.dims,n.dims);let d=t.dims,f=r.ShapeUtil.size(t.dims),h=!1;if(p){const e=r.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!e)throw new Error(\\\"Can't perform binary op on the given tensors\\\");d=e,f=r.ShapeUtil.size(d);let a=1;for(let e=0;e<d.length;e++){const r=null!==(l=t.dims[t.dims.length-e])&&void 0!==l?l:1;if(r!==(null!==(c=n.dims[n.dims.length-e])&&void 0!==c?c:1))break;a*=r}a%4==0&&(h=!0)}else h=!0;return Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,a,i,s,u,l,c=\\\"f32\\\",p=\\\"f32\\\",d=\\\"f32\\\")=>{const f=r.ShapeUtil.size(a),h=Math.ceil(f/4);let g,m;\\\"string\\\"==typeof u?g=m=(e,t)=>`${u}((${e}),(${t}))`:\\\"function\\\"==typeof u?g=m=u:(g=u.scalar,m=u.vector);let v=\\\"\\\";const b=(0,o.createIndicesHelper)(\\\"output\\\",a);if(s){const e=e=>{const t=r.ShapeUtil.computeStrides(e),n=[];for(let r=e.length-1;r>=0;r--){const o=0===a.length?\\\"0u\\\":1===a.length?\\\"(*outputIndices)\\\":`(*outputIndices)[${r+a.length-e.length}]`;n.push(`${t[r]}u * (${o} % ${e[r]}u)`)}return n.length>0?n.join(\\\"+\\\"):\\\"0u\\\"};v=`\\\\n  ${b.o2iImpl}\\\\n\\\\n  fn calcOffsetA(outputIndices: ptr<function, ${b.iType}>) -> u32 {\\\\n    return ${e(t)};\\\\n  }\\\\n\\\\n  fn calcOffsetB(outputIndices: ptr<function, ${b.iType}>) -> u32 {\\\\n    return ${e(n)};\\\\n  }\\\\n  `}let y;if(i)y=s?`\\\\n      ${b.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n      ${b.o2iCall(\\\"global_idx * 4u\\\",\\\"outputIndices\\\")}\\\\n      let offsetA = calcOffsetA(&outputIndices);\\\\n      let offsetB = calcOffsetB(&outputIndices);\\\\n      outputData[global_idx] = ${m(\\\"aData[offsetA / 4u]\\\",\\\"bData[offsetB / 4u]\\\")};`:`outputData[global_idx] = ${m(\\\"aData[global_idx]\\\",\\\"bData[global_idx]\\\")};`;else{if(!s)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");const e=e=>{const t=`aData[indexA${e}][componentA${e}]`,n=`bData[indexB${e}][componentB${e}]`;return`\\\\n      ${b.o2iCall(`global_idx * 4u + ${e}u`,\\\"outputIndices\\\")}\\\\n      let offsetA${e} = calcOffsetA(&outputIndices);\\\\n      let offsetB${e} = calcOffsetB(&outputIndices);\\\\n      let indexA${e} = offsetA${e} / 4u;\\\\n      let indexB${e} = offsetB${e} / 4u;\\\\n      let componentA${e} = offsetA${e} % 4u;\\\\n      let componentB${e} = offsetB${e} % 4u;\\\\n      outputData[global_idx][${e}] = ${g(t,n)};`};y=`\\\\n      ${b.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n      ${e(0)}\\\\n      ${e(1)}\\\\n      ${e(2)}\\\\n      ${e(3)}`}return`\\\\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${c}>>;\\\\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${p}>>;\\\\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${d}>>;\\\\n\\\\n  ${null!=l?l:\\\"\\\"}\\\\n  ${v}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)}\\\\n    ${y}\\\\n  }`})(e,t.dims,n.dims,d,h,p,i,s),outputs:[{dims:d,dataType:u,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(f/64/(h?4:1))})})})(u,e[0],e[1],n,i)})};t.add=e=>{e.compute(i(e.inputs,\\\"Add\\\",((e,t)=>`${e}+${t}`)))},t.div=e=>{e.compute(i(e.inputs,\\\"Div\\\",((e,t)=>`${e}/${t}`)))},t.mul=e=>{e.compute(i(e.inputs,\\\"Mul\\\",((e,t)=>`${e}*${t}`)))},t.pow=e=>{e.compute(i(e.inputs,\\\"Pow\\\",{scalar:(e,t)=>`pow_f32(${e},${t})`,vector:(e,t)=>`pow_vf32(${e},${t})`},\\\"\\\\n    fn pow_f32(a : f32, b : f32) -> f32 {\\\\n      if (b == 0.0) {\\\\n        return 1.0;\\\\n      } else if (a < 0.0 && b != floor(b)) {\\\\n        return pow(a, b); // NaN\\\\n      }\\\\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\\\\n    }\\\\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\\\\n    }\\\\n      \\\"))},t.sub=e=>{e.compute(i(e.inputs,\\\"Sub\\\",((e,t)=>`${e}-${t}`)))}},75:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createShaderHelper=t.createIndicesHelper=t.WORKGROUP_SIZE=void 0;const r=n(952);t.WORKGROUP_SIZE=64,t.createIndicesHelper=(e,t)=>{const n=t.length<2?\\\"u32\\\":`array<u32, ${t.length}>`,a=r.ShapeUtil.computeStrides(t);let o=\\\"\\\";for(let e=0;e<t.length-1;e++)o+=`\\\\n    let dim${e} = current / ${a[e]}u;\\\\n    let rest${e} = current % ${a[e]}u;\\\\n    (*indices)[${e}] = dim${e};\\\\n    current = rest${e};\\\\n    `;o+=`(*indices)[${t.length-1}] = current;`;const i=t.length<2?\\\"\\\":`\\\\n  fn ih_o2i_${e}(offset: u32, indices: ptr<function, ${n}>) {\\\\n    var current = offset;\\\\n    ${o}\\\\n  }`,s=[];if(0===t.length)s.push(\\\"0u\\\");else if(t.length<2)s.push(\\\"(*indices)\\\");else for(let e=t.length-1;e>=0;e--)s.push(`${a[e]}u * ((*indices)[${e}])`);return{o2iImpl:i,o2iCall:(n,r)=>t.length<2?`${r}=${n};`:`ih_o2i_${e}(${n}, &${r});`,i2oImpl:t.length<2?\\\"\\\":`\\\\n  fn ih_i2o_${e}(indices: ptr<function, ${n}>) -> u32 {\\\\n    return ${s.join(\\\"+\\\")};\\\\n  }`,i2oExpression:(n,r)=>t.length<2?`(${r?\\\"*\\\":\\\"\\\"}${n})`:`ih_i2o_${e}(${r?\\\"\\\":\\\"&\\\"}${n})`,indicesVariableDeclaration:(e,t)=>`var ${e}:${n}${t?`=${n}(${t.join(\\\",\\\")})`:\\\"\\\"};`,iType:n}};class a{constructor(e){this.normalizedDispatchGroup=e}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${\\\"number\\\"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=t.WORKGROUP_SIZE){const n=\\\"number\\\"==typeof e?e:e[0],r=\\\"number\\\"==typeof e?1:e[1],a=\\\"number\\\"==typeof e?1:e[2],o=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${n}, ${r}, ${a})\\\\n  fn main(${o?\\\"@builtin(global_invocation_id) global_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\"}) {\\\\n    ${o?\\\"let global_idx = global_id.x;\\\":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +\\\\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${n*r*a}u + local_index;`}\\\\n  `}}t.createShaderHelper=e=>new a(e)},192:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;const r=n(952),a=n(163),o=n(75),i=n(770),s=n(997);t.createGroupedConvProgramInfoLoader=(e,t,n)=>{const u=(l=e.length>2,c=t.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:l?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:()=>((e,t,n,u)=>{const l=e.length>2,c=l?\\\"value += b[output_channel];\\\":\\\"\\\",p=e[0].dims,d=e[1].dims,f=d[0]/n.group,h=\\\"f32\\\",{activationFunction:g,applyActivation:m}=(0,s.getActicationSnippet)(n),v=[`@group(0) @binding(0) var<storage, read> x : array<${h}>;`,`@group(0) @binding(1) var<storage, read> w : array<${h}>;`];l&&v.push(`@group(0) @binding(2) var<storage, read> b : array<${h}>;`);const b=\\\"NHWC\\\"===n.format,y=(0,i.calculateOutputShape)(p,d,n.dilations,n.pads,n.strides,b),w=r.ShapeUtil.size(y),_=(0,o.createIndicesHelper)(\\\"output\\\",y),$=(0,o.createIndicesHelper)(\\\"x\\\",p),S=(0,o.createIndicesHelper)(\\\"w\\\",d);return Object.assign(Object.assign({},t),{outputs:[{dims:u?u(y):y,dataType:e[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const strides: vec2<u32> = vec2(${n.strides[0]}u, ${n.strides[1]}u);\\\\n  const pads: vec2<u32> = vec2(${n.pads[0]}u, ${n.pads[1]}u);\\\\n\\\\n  ${v.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${v.length}) var<storage, read_write> output : array<${h}>;\\\\n\\\\n  ${g}\\\\n  ${_.o2iImpl}\\\\n  ${$.i2oImpl}\\\\n  ${S.i2oImpl}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(w)}\\\\n\\\\n    ${_.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n    ${_.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\")}\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[${b?3:1}];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${b?1:2}], outputIndices[${b?2:3}]) * strides - pads;\\\\n    let group_id: u32 = output_channel / ${f}u;\\\\n\\\\n    var value: ${h} = ${h}(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < ${d[1]}u; wInChannel++) {\\\\n      let input_channel = group_id * ${d[1]}u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < ${d[2]}u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * ${n.dilations[0]}u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= ${p[b?1:2]}u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < ${d[3]}u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * ${n.dilations[1]}u;\\\\n          if (xWidth < 0u || xWidth >= ${p[b?2:3]}u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          ${$.indicesVariableDeclaration(\\\"xIndices\\\",b?[\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"]:[\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\"])}\\\\n          let xVal = x[${$.i2oExpression(\\\"xIndices\\\")}];\\\\n          ${S.indicesVariableDeclaration(\\\"wIndices\\\",[\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\"])}\\\\n          let wVal = w[${S.i2oExpression(\\\"wIndices\\\")}];\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    ${c}\\\\n    ${m}\\\\n    output[global_idx] = value;\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(w/64)})})})(e,u,t,n)})}},770:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;const r=n(952),a=n(387),o=n(192),i=n(822),s=n(997),u=n(625);t.calculateOutputShape=(e,t,n,r,a,o)=>{const i=e[0],s=e.slice(o?1:2,o?3:4),u=s.length,l=t[0],c=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),p=s.map(((e,t)=>e+r[t]+r[t+u])).map(((e,t)=>Math.floor((e-c[t]+a[t])/a[t])));return p.splice(0,0,i),p.splice(o?3:1,0,l),p};const l=(0,a.createAttributeWithCacheKey)({perm:[2,3,1,0]}),c=(e,t)=>{const n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);const a=e.pads.slice();r.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,a,\\\"NHWC\\\"===e.format,e.autoPad);const o=Object.assign({},e);return Object.assign(o,{kernelShape:n,pads:a,cacheKey:e.cacheKey}),o};t.parseConvAttributes=e=>{const t=(0,s.parseInternalActivationAttributes)(e),n=e.format,r=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],o=e.dilations,i=e.group,u=e.kernel_shape,l=e.pads,c=e.strides,p=e.w_is_const();return(0,a.createAttributeWithCacheKey)(Object.assign({autoPad:r,format:n,dilations:o,group:i,kernelShape:u,pads:l,strides:c,wIsConst:p},t))},t.conv=(e,n)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");const n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"Conv input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"Conv input(bias) should be float tensor\\\")})(e.inputs,n),3===e.inputs[0].dims.length?((e,t)=>{const n=\\\"NHWC\\\"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);const a=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),s=[1].concat(t.dilations),u=[1].concat(t.kernelShape),l=c(Object.assign(Object.assign({},t),{pads:a,strides:i,dilations:s,kernelShape:u}),r);e.compute((0,o.createGroupedConvProgramInfoLoader)(r,l,(e=>n?[e[0],e[2],e[3]]:[])))})(e,n):((e,n,r)=>{var a;const s=c(r,n),p=3===n.length,d=\\\"NHWC\\\"===r.format,f=n[0].dims[d?1:2],h=n[0].dims[d?2:3],g=n[0].dims[d?3:1],m=n[1].dims[2],v=n[1].dims[3],b=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,r.dilations,s.pads,r.strides,d),y=b[d?1:2],w=b[d?2:3],_=b[d?3:1];if(d&&m===f&&v===h&&\\\"VALID\\\"===r.autoPad||1===m&&1===v&&1===r.dilations[0]&&1===r.dilations[1]&&1===r.strides[0]&&1===r.strides[1]&&(\\\"SAME_UPPER\\\"===r.autoPad||\\\"SAME_LOWER\\\"===r.autoPad||\\\"VALID\\\"===r.autoPad))return void e.compute((0,o.createGroupedConvProgramInfoLoader)(n,s));if(!d||1!==r.group)return void e.compute((0,o.createGroupedConvProgramInfoLoader)(n,s));const $=d?y*w:_,S=d?_:y*w,A=m*v*g,C=null!==(a=e.customData.wT)&&void 0!==a?a:e.compute(Object.assign(Object.assign({},u.transposeProgramMetadata),{cacheHint:l.cacheKey,get:()=>(0,u.createTransposeProgramInfo)(n[1],l.perm)}),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.customData.wT&&(e.customData.wT=C);const O=[n[0],C];p&&(d||1!==n[2].dims.length?O.push(n[2]):O.push(n[2].reshape([n[2].dims[0],1,1]))),e.compute((0,i.createConv2DMatMulProgramInfoLoader)(O,s,b,$,S,A,p,!0),{inputs:O})})(e,e.inputs,n)}},822:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;const r=n(163),a=n(456);t.createConv2DMatMulProgramInfoLoader=(e,t,n,o,i,s,u,l)=>{const c=((e,t)=>({name:\\\"Conv2DMatMul\\\",inputTypes:e?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:t}))(u,t.cacheKey);return Object.assign(Object.assign({},c),{get:()=>(0,a.createConv2DMatMulProgramInfo)(e,c,t,n,o,i,s,u,l)})}},997:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;const r=n(952);t.getActicationSnippet=e=>{switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:`const clip_min_=f32(${e.clipMin});const clip_max_=f32(${e.clipMax});`,applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},t.parseInternalActivationAttributes=e=>{const t=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===t){const[n,a]=(null==e?void 0:e.activation_params)||[r.MIN_CLIP,r.MAX_CLIP];return{activation:t,clipMax:a,clipMin:n,activationCacheKey:`${t}:${n},${a}`}}return{activation:t,activationCacheKey:t}}},271:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;const r=n(952),a=n(387),o=n(163);t.gemm=(e,t)=>{(e=>{if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error(\\\"Invalid input type.\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")})(e.inputs),e.compute(((e,t)=>{const n={name:\\\"Gemm\\\",inputTypes:3===e.length?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:t.cacheKey};return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const a=t[0].dims.slice(),i=t[1].dims.slice(),[s,u,l]=r.GemmUtil.getShapeOfGemmResult(a,n.transA,i,n.transB,3===t.length?t[2].dims:void 0),c=[s,u];if(!c)throw new Error(\\\"Can't use gemm on the given tensors\\\");const p=r.ShapeUtil.size(c);let d=\\\"\\\";n.transA&&n.transB?d=\\\"value += a[k * M + m] * b[n * K + k];\\\":n.transA&&!n.transB?d=\\\"value += a[k * M + m] * b[k * N + n];\\\":!n.transA&&n.transB?d=\\\"value += a[m * K + k] * b[n * K + k];\\\":n.transA||n.transB||(d=\\\"value += a[m * K + k] * b[k * N + n];\\\");const f=\\\"f32\\\",h=1===n.alpha?\\\"\\\":\\\"value *= alpha;\\\",g=3===t.length?`value += beta * c[${((e,t,n)=>{if(0===n.length)return\\\"0u\\\";const r=1===n.length&&1!==e||2===n.length&&n[0]!==e,a=n[n.length-1]!==t;let o=\\\"0u\\\";return r||(o+=`+ m * ${n[n.length-1]}u`),a||(o+=\\\"+n\\\"),o})(s,u,t[2].dims)}];`:\\\"\\\",m=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];return 3===t.length&&m.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`),Object.assign(Object.assign({},e),{outputs:[{dims:c,dataType:t[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:e=>`\\\\n  const M: u32 = ${s}u;\\\\n  const N: u32 = ${u}u;\\\\n  const K: u32 = ${l}u;\\\\n  const alpha = ${f}(${n.alpha});\\\\n  const beta = ${f}(${n.beta});\\\\n\\\\n  ${m.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${t.length}) var<storage, read_write> output : array<${f}>;\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)}\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = ${f}(0);\\\\n    for (var k: u32 = 0u; k<${l}u; k++) {\\\\n      ${d}\\\\n    }\\\\n\\\\n    ${h}\\\\n    ${g}\\\\n    output[global_id.x] = value;\\\\n\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(p/64)})})})(n,e,t)})})(e.inputs,t))},t.parseGemmAttributes=e=>(0,a.createAttributeWithCacheKey)(e)},522:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;const r=n(952),a=n(163),o=n(997);t.createMatmulProgramInfoLoader=(e,t)=>{const n=(i=e.length>2,s=t.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:i?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s});var i,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const i=t[0].dims,s=t[1].dims,u=r.BroadcastUtil.calcShape(i,s,!0);if(!u)throw new Error(\\\"Can't use matmul on the given tensors\\\");const l=r.ShapeUtil.size(u),c=\\\"f32\\\",{activationFunction:p,applyActivation:d}=(0,o.getActicationSnippet)(n),f=u[u.length-2],h=i[i.length-1],g=u[u.length-1];return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const M: u32 = ${f}u;\\\\n  const N: u32 = ${g}u;\\\\n  const K: u32 = ${h}u;\\\\n\\\\n  @group(0) @binding(0) var<storage, read> a : array<${c}>;\\\\n  @group(0) @binding(1) var<storage, read> b : array<${c}>;\\\\n  @group(0) @binding(2) var<storage, read_write> output : array<${c}>;\\\\n\\\\n  ${p}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n\\\\n    let stack = global_idx / (M * N);\\\\n    let mn = global_idx % (M * N);\\\\n    let n = global_idx % N;\\\\n    let m = mn / N;\\\\n\\\\n    let offsetA = stack * (M * K);\\\\n    let offsetB = stack * (K * N);\\\\n\\\\n    var value = ${c}(0);\\\\n    for (var k: u32 = 0u; k<${h}u; k++) {\\\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\\\n    }\\\\n    ${d}\\\\n    output[global_idx] = value;\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(l/64)})})})(n,e,t)})},t.matMul=e=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")})(e.inputs),e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"}))}},262:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;const r=n(952),a=n(387),o=n(163),i=n(75),s=e=>{if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=(e,t,n)=>{const a=\\\"NHWC\\\"===t.format,o=a?[e[0].dims[0],e[0].dims[3],e[0].dims[1],e[0].dims[2]]:e[0].dims.slice(),i=Object.hasOwnProperty.call(t,\\\"dilations\\\"),s=t.kernelShape.slice(),u=t.strides.slice(),l=i?t.dilations.slice():[],c=t.pads.slice();r.PoolConvUtil.adjustPoolAttributes(n,o,s,u,l,c);const p=r.PoolConvUtil.computePoolOutputShape(n,o,u,l,s,c,t.autoPad),d=Object.assign({},t);return i?Object.assign(d,{kernelShape:s,strides:u,pads:c,dilations:l,cacheKey:t.cacheKey}):Object.assign(d,{kernelShape:s,strides:u,pads:c,cacheKey:t.cacheKey}),[d,a?[p[0],p[2],p[3],p[1]]:p]},l=(e,t,n,a,o,s,u,l)=>{const c=\\\"NHWC\\\"===a.format,p=t.length,d=r.ShapeUtil.size(n),f=(0,i.createIndicesHelper)(\\\"output\\\",n),h=(0,i.createIndicesHelper)(\\\"x\\\",t);if(a.kernelShape.length<=2){const n=a.kernelShape[a.kernelShape.length-1],r=a.strides[a.strides.length-1],i=a.pads[a.pads.length/2-1],g=p-(c?2:1);let m=\\\"\\\",v=\\\"\\\",b=\\\"\\\";if(m=i+a.pads[a.pads.length-1]!==0?`\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                xIndices[${g}] = indices[${g}] * ${r} - ${i} + i;\\\\n                if (xIndices[${g}] < 0 || xIndices[${g}] >= ${t[g]}) {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n                ${o}\\\\n              }`:`\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                xIndices[${g}] = indices[${g}] * ${r} - ${i} + i;\\\\n                let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n                ${o}\\\\n              }`,2===a.kernelShape.length){const e=a.kernelShape[a.kernelShape.length-2],r=a.strides[a.strides.length-2],o=a.pads[a.pads.length/2-2],i=a.pads[a.pads.length-2],s=p-(c?3:2),u=t[s];v=o+i!==0?`\\\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\\\n                  xIndices[${s}] = indices[${s}] * ${r} - ${o} + j;\\\\n                  if (xIndices[${s}] < 0 || xIndices[${s}] >= ${u}) {\\\\n                    pad+= ${n};\\\\n                    continue;\\\\n                  }\\\\n              `:`\\\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\\\n                  xIndices[${s}] = indices[${s}] * ${r} - ${o} + j;\\\\n                `,b=\\\"\\\\n              }\\\\n            \\\"}return`\\\\n            @group(0) @binding(0) var<storage, read> x : array<${u}>;\\\\n            @group(0) @binding(1) var<storage, read_write> output : array<${u}>;\\\\n\\\\n            ${f.o2iImpl}\\\\n            ${h.i2oImpl}\\\\n\\\\n            ${e.mainStart()}\\\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)}\\\\n\\\\n              ${f.indicesVariableDeclaration(\\\"indices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n              ${f.indicesVariableDeclaration(\\\"xIndices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"xIndices\\\")}\\\\n\\\\n              var value: ${u} = ${u}(${l});\\\\n              var pad = 0;\\\\n              ${v}\\\\n              ${m}\\\\n              ${b}\\\\n              ${s}\\\\n\\\\n              output[global_idx] = value;\\\\n            }`}{if(c)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");const n=r.ShapeUtil.size(a.kernelShape),i=r.ShapeUtil.computeStrides(a.kernelShape),g=i.length,m=a.pads.length;let v=\\\"\\\";return v=a.pads.reduce(((e,t)=>e+t))?`\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n                ${o}\\\\n              }`:`\\\\n              }\\\\n              let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n              ${o}\\\\n            `,`\\\\n            @group(0) @binding(0) var<storage, read> x : array<${u}>;\\\\n            @group(0) @binding(1) var<storage, read_write> output : array<${u}>;\\\\n\\\\n            ${f.o2iImpl}\\\\n            ${h.i2oImpl}\\\\n\\\\n            const pads = array<u32, ${m}>(${a.pads.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const inputDims = array<u32, ${p}>(${t.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const kernelStrides = array<u32, ${g}>(${i.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const strides = array<u32, ${g}>(${a.strides.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n\\\\n            ${e.mainStart()}\\\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)}\\\\n\\\\n              ${f.indicesVariableDeclaration(\\\"indices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n              ${f.indicesVariableDeclaration(\\\"xIndices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"xIndices\\\")}\\\\n\\\\n              var offsets: array<u32, ${g}>;\\\\n\\\\n              var value = ${u}(${l});\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < ${g-1}u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[${g-1}] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = ${p-g}u; j < ${p}u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - ${p-g}u]\\\\n                    + offsets[j - ${p-g}u] - pads[j - 2u];\\\\n                  ${v}\\\\n              }\\\\n              ${s}\\\\n\\\\n              output[global_idx] = value;\\\\n            }`}},c=e=>({format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),p=(e,t,n,a)=>{const[i,s]=u(e,a,n),c=r.ShapeUtil.size(i.kernelShape),p=\\\"f32\\\";let d=\\\"\\\";return i.countIncludePad?d+=`value /= ${p}(${c});`:d+=`value /= ${p}(${c} - pad);`,Object.assign(Object.assign({},t),{outputs:[{dims:s,dataType:e[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:t=>l(t,e[0].dims,s,i,\\\"value += x_val;\\\",d,p,\\\"0.0\\\"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(s)/64)})})};t.parseAveragePoolAttributes=e=>{const t=0!==e.count_include_pad,n=c(e);if(0!==n.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,a.createAttributeWithCacheKey)(Object.assign({countIncludePad:t},n))},t.averagePool=(e,t)=>{s(e.inputs);const n={name:\\\"AveragePool\\\",inputTypes:[o.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>p(e.inputs,n,!1,t)}))};const d={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};t.parseGlobalAveragePoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},d),{cacheKey:t})},t.globalAveragePool=(e,t)=>{s(e.inputs);const n={name:\\\"GlobalAveragePool\\\",inputTypes:[o.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>p(e.inputs,n,!0,t)}))};const f=(e,t,n,a)=>{const[i,s]=u(e,a,n);return Object.assign(Object.assign({},t),{outputs:[{dims:s,dataType:e[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:t=>l(t,e[0].dims,s,i,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"f32\\\",\\\"-1e5\\\"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(s)/64)})})};t.maxPool=(e,t)=>{s(e.inputs);const n={name:\\\"MaxPool\\\",inputTypes:[o.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs,n,!1,t)}))},t.parseMaxPoolAttributes=e=>{const t=e.storage_order,n=e.dilations,r=c(e);if(0!==t)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==r.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,a.createAttributeWithCacheKey)(Object.assign({storageOrder:t,dilations:n},r))},t.parseGlobalMaxPoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},d),{cacheKey:t})},t.globalMaxPool=(e,t)=>{s(e.inputs);const n={name:\\\"GlobalMaxPool\\\",inputTypes:[o.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs,n,!0,t)}))}},625:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;const r=n(952),a=n(387),o=n(163),i=n(75);t.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[o.GpuDataType.default]};const s=(e,t)=>t&&t.length!==e.length?[...e.keys()].reverse():t;t.createTransposeProgramInfo=(e,n)=>{const a=e.dims,u=s(a,n),l=((e,t)=>r.ShapeUtil.sortBasedOnPerm(e,s(e,t)))(a,u),c=a.length,p=r.ShapeUtil.size(l),d=(0,i.createIndicesHelper)(\\\"output\\\",l),f=(0,i.createIndicesHelper)(\\\"a\\\",a);return Object.assign(Object.assign({},t.transposeProgramMetadata),{outputs:[{dims:l,dataType:e.dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:e=>`\\\\n  @group(0) @binding(0) var<storage, read> a : array<f32>;\\\\n  @group(0) @binding(1) var<storage, read_write> output : array<f32>;\\\\n\\\\n  ${((e,t)=>{const n=[];n.push(`fn perm(a: ptr<function, array<u32, ${t}>>, i: ptr<function, array<u32, ${t}>>) {`);for(let r=0;r<t;++r)n.push(`\\\\t(*a)[${e[r]}]=(*i)[${r}];`);return n.push(\\\"\\\\t}\\\"),n.join(\\\"\\\\n\\\")})(u,c)}\\\\n  ${d.o2iImpl}\\\\n  ${f.i2oImpl}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)}\\\\n\\\\n    ${d.indicesVariableDeclaration(\\\"indices\\\")}\\\\n    ${d.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n    ${f.indicesVariableDeclaration(\\\"aIndices\\\")}\\\\n    perm(&aIndices, &indices);\\\\n\\\\n    output[global_idx] = a[${f.i2oExpression(\\\"aIndices\\\")}];\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(p/64)})})},t.transpose=(e,n)=>{(e=>{if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\");if(1!==e[0].dataType)throw new Error(\\\"input should be float tensor\\\")})(e.inputs),e.compute(Object.assign(Object.assign({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:()=>(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}))},t.parseTransposeAttributes=e=>(0,a.createAttributeWithCacheKey)({perm:e.perm})},302:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.leakyRelu=t.floor=t.exp=t.erf=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;const r=n(952),a=n(387),o=n(163),i=(e,t,n,a,i)=>{const s={name:t,inputTypes:[o.GpuDataType.default],cacheHint:i};return Object.assign(Object.assign({},s),{get:()=>((e,t,n,a)=>Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,r)=>{const a=Math.ceil(t/4);let o=\\\"\\\";return o=\\\"string\\\"==typeof n?`${n}(a)`:n(\\\"a\\\"),`\\\\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\\\\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\\\\n\\\\n  ${null!=r?r:\\\"\\\"}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(a)}\\\\n\\\\n    let a = inputData[global_idx];\\\\n    outputData[global_idx] = ${o};\\\\n  }`})(e,r.ShapeUtil.size(t.dims),n,a),outputs:[{dims:t.dims,dataType:t.dataType,gpuDataType:o.GpuDataType.default}],dispatchGroup:e=>({x:Math.ceil(r.ShapeUtil.size(e[0].dims)/64/4)})}))(s,e,n,a)})};t.abs=e=>{e.compute(i(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},t.acos=e=>{e.compute(i(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},t.acosh=e=>{e.compute(i(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},t.asin=e=>{e.compute(i(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},t.asinh=e=>{e.compute(i(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},t.atan=e=>{e.compute(i(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},t.atanh=e=>{e.compute(i(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},t.clipV10=(e,t)=>{e.compute(i(e.inputs[0],\\\"Clip\\\",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\\\\n    const clip_min_: vec4<f32> = vec4(f32(${t.min}));\\\\n    const clip_max_: vec4<f32> = vec4(f32(${t.max}));\\\\n`,t.cacheKey),{inputs:[0]})},t.clip=e=>{const n=(e=>{const t=e.length>=2?e[1].getFloat32Array()[0]:r.MIN_CLIP,n=e.length>=3?e[2].getFloat32Array()[0]:r.MAX_CLIP;return(0,a.createAttributeWithCacheKey)({min:t,max:n})})(e.inputs);(0,t.clipV10)(e,n)},t.ceil=e=>{e.compute(i(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},t.cos=e=>{e.compute(i(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},t.cosh=e=>{e.compute(i(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},t.parseAlphaAttributes=e=>(0,a.createAttributeWithCacheKey)(e),t.elu=(e,t)=>{e.compute(i(e.inputs[0],\\\"Elu\\\",(e=>`elu_vf32(${e})`),`\\\\n  const elu_alpha_: f32 = f32(${t.alpha});\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }`,t.cacheKey))},t.erf=e=>{e.compute(i(e.inputs[0],\\\"Erf\\\",(e=>`erf_vf32(${e})`),\\\"\\\\n  const r0: f32 = 0.3275911;\\\\n  const r1: f32 = 0.254829592;\\\\n  const r2: f32 = -0.284496736;\\\\n  const r3: f32 = 1.421413741;\\\\n  const r4: f32 = -1.453152027;\\\\n  const r5: f32 = 1.061405429;\\\\n\\\\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n    let absv = abs(v);\\\\n    let x = 1.0 / (1.0 + r0 * absv);\\\\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n  }\\\"))},t.exp=e=>{e.compute(i(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},t.floor=e=>{e.compute(i(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},t.leakyRelu=(e,t)=>{e.compute(i(e.inputs[0],\\\"LeakyRelu\\\",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<f32>(0.0))`),`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},t.neg=e=>{e.compute(i(e.inputs[0],\\\"Neg\\\",(e=>`-${e}`)))},t.reciprocal=e=>{e.compute(i(e.inputs[0],\\\"Reciprocal\\\",(e=>`1.0/${e}`)))},t.relu=e=>{e.compute(i(e.inputs[0],\\\"Relu\\\",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > vec4<f32>(0.0))`)))},t.sigmoid=e=>{e.compute(i(e.inputs[0],\\\"Sigmoid\\\",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},t.sin=e=>{e.compute(i(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},t.sinh=e=>{e.compute(i(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},t.sqrt=e=>{e.compute(i(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},t.tan=e=>{e.compute(i(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},t.tanh=e=>{e.compute(i(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},t.thresholdedRelu=(e,t)=>(e.compute(i(e.inputs[0],\\\"ThresholdedRelu\\\",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0)},305:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.ProgramManager=void 0;const r=n(955),a=n(75);t.ProgramManager=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,r){const a=this.backend.device,o=this.backend.getComputePassEncoder();this.backend.profilingEnabled&&o.writeTimestamp(this.backend.profilingQuerySet,0),o.setPipeline(e.computePipeline);const i=[];for(const e of t)i.push({binding:i.length,resource:{buffer:e.buffer}});for(const e of n)i.push({binding:i.length,resource:{buffer:e.buffer}});const s=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:i});if(o.setBindGroup(0,s),o.dispatchWorkgroups(...r),this.backend.pendingDispatchNumber++,this.backend.profilingEnabled){o.writeTimestamp(this.backend.profilingQuerySet,1);const e=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),t=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,e.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(e.buffer,0,t.buffer,0,16),this.backend.flush();const n=this.backend.currentKernelId,r=this.backend.kernels.get(n)[0];t.buffer.mapAsync(GPUMapMode.READ).then((()=>{const a=new BigUint64Array(t.buffer.getMappedRange()),o=a[0],i=a[1];t.buffer.unmap(),void 0===this.backend.profilingTimeBase&&(this.backend.profilingTimeBase=o);const s=Number(o-this.backend.profilingTimeBase),u=Number(i-this.backend.profilingTimeBase);if(!Number.isSafeInteger(s)||!Number.isSafeInteger(u))throw new RangeError(\\\"incorrect timestamp range\\\");this.backend.gpuDataManager.release(e.id),this.backend.gpuDataManager.release(t.id),console.log(`[profiling] kernel \\\"${n}|${r}\\\" execution time: ${u-s} ns`)}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(e,t){const n=this.backend.device,o=e.getShaderSource((0,a.createShaderHelper)(t)),i=n.createShaderModule({code:o});return(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] shader code: ${o}`)),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:i,entryPoint:\\\"main\\\"},layout:\\\"auto\\\"})}}normalizeDispatchGroupSize(e){const t=\\\"number\\\"==typeof e?e:e.x,n=\\\"number\\\"==typeof e?1:e.y||1,r=\\\"number\\\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];const o=t*n*r;let i=Math.ceil(Math.sqrt(o));if(i>a){if(i=Math.ceil(Math.cbrt(o)),i>a)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[i,i,i]}return[i,i,1]}}},163:(e,t)=>{\\\"use strict\\\";var n;Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]=\\\"default\\\",n[n.upload=1]=\\\"upload\\\",n[n.profile=2]=\\\"profile\\\"},899:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},918:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setRunOptions=e=>{const t=(0,o.getInstance)();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},622:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setSessionOptions=e=>{var t,n,i,s;const u=(0,o.getInstance)();let l=0;const c=[],p=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(p);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=p.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),d=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=p.executionMode)&&void 0!==n?n:\\\"sequential\\\"),f=\\\"string\\\"==typeof p.logId?(0,a.allocWasmString)(p.logId,c):0,h=null!==(i=p.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log serverity level is not valid: ${h}`);const g=null!==(s=p.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const m=\\\"string\\\"==typeof p.optimizedModelFilePath?(0,a.allocWasmString)(p.optimizedModelFilePath,c):0;if(l=u._OrtCreateSessionOptions(e,!!p.enableCpuMemArena,!!p.enableMemPattern,d,!!p.enableProfiling,0,f,h,g,m),0===l)throw new Error(\\\"Can't create session options\\\");return p.executionProviders&&((e,t,n)=>{for(const r of t){let t=\\\"string\\\"==typeof r?r:r.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof r){const t=r;if(null==t?void 0:t.deviceType){const r=(0,a.allocWasmString)(\\\"deviceType\\\",n),i=(0,a.allocWasmString)(t.deviceType,n);if(0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,r,i))throw new Error(`Can't set a session config entry: 'deviceType' - ${t.deviceType}`)}if(null==t?void 0:t.powerPreference){const r=(0,a.allocWasmString)(\\\"powerPreference\\\",n),i=(0,a.allocWasmString)(t.powerPreference,n);if(0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,r,i))throw new Error(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=(0,a.allocWasmString)(t,n);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,i))throw new Error(`Can't append execution provider: ${t}`)}})(l,p.executionProviders,c),void 0!==p.extra&&(0,r.iterateExtraOptions)(p.extra,\\\"\\\",new WeakSet,((e,t)=>{const n=(0,a.allocWasmString)(e,c),r=(0,a.allocWasmString)(t,c);if(0!==u._OrtAddSessionConfigEntry(l,n,r))throw new Error(`Can't set a session config entry: ${e} - ${t}`)})),[l,c]}catch(e){throw 0!==l&&u._OrtReleaseSessionOptions(l),c.forEach(u._free),e}}},444:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(263);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:case 10:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const r=n(675),a=n(918),o=n(622),i=n(444),s=n(917),u=n(263);t.initRuntime=async e=>{await(async(e,t)=>{const n=(0,u.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)})(e.wasm.numThreads,(0,s.logLevelStringToEnum)(e.logLevel)),await(0,r.init)((0,u.getInstance)(),e)};const l=new Map;t.createSessionAllocate=e=>{const t=(0,u.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,u.getInstance)();let r=0,a=0,i=[];try{if([a,i]=(0,o.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],a),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(e[0]),0!==a&&n._OrtReleaseSessionOptions(a),i.forEach(n._free)}const s=n._OrtGetInputCount(r),c=n._OrtGetOutputCount(r),p=[],d=[],f=[],h=[];for(let e=0;e<s;e++){const t=n._OrtGetInputName(r,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");d.push(t),p.push(n.UTF8ToString(t))}for(let e=0;e<c;e++){const t=n._OrtGetOutputName(r,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");h.push(t),f.push(n.UTF8ToString(t))}return l.set(r,[r,d,h]),[r,p,f]},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,u.getInstance)(),n=l.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),l.delete(e)},t.run=async(e,t,n,r,o)=>{const c=(0,u.getInstance)(),p=l.get(e);if(!p)throw new Error(\\\"invalid session id\\\");const d=p[0],f=p[1],h=p[2],g=t.length,m=r.length;let v=0,b=[];const y=[],w=[];try{[v,b]=(0,a.setRunOptions)(o);for(let e=0;e<g;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=c._malloc(u),w.push(o);let e=o/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);c.HEAPU32[e++]=(0,i.allocWasmString)(a[t],w)}}else u=a.byteLength,o=c._malloc(u),w.push(o),c.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const l=c.stackSave(),p=c.stackAlloc(4*r.length);try{let e=p/4;r.forEach((t=>c.HEAP32[e++]=t));const n=c._OrtCreateTensor((0,s.tensorDataTypeStringToEnum)(t),o,u,p,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");y.push(n)}finally{c.stackRestore(l)}}const e=c.stackSave(),u=c.stackAlloc(4*g),l=c.stackAlloc(4*g),p=c.stackAlloc(4*m),_=c.stackAlloc(4*m);try{let e=u/4,n=l/4,a=p/4,o=_/4;for(let r=0;r<g;r++)c.HEAPU32[e++]=y[r],c.HEAPU32[n++]=f[t[r]];for(let e=0;e<m;e++)c.HEAPU32[a++]=0,c.HEAPU32[o++]=h[r[e]];let i=c._OrtRun(d,l,u,g,_,m,p,v);const b=c.jsepRunPromise;b&&void 0!==b.then&&(i=await b);const w=[];if(0===i)for(let e=0;e<m;e++){const t=c.HEAPU32[p/4+e],n=c.stackSave(),r=c.stackAlloc(16);let a,o=0;try{if(i=c._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==i)throw new Error(`Can't access output tensor data. error code = ${i}`);let e=r/4;const n=c.HEAPU32[e++];o=c.HEAPU32[e++];const u=c.HEAPU32[e++],l=c.HEAPU32[e++],p=[];for(let e=0;e<l;e++)p.push(c.HEAPU32[u/4+e]);c._OrtFree(u);const d=0===p.length?1:p.reduce(((e,t)=>e*t));if(a=(0,s.tensorDataTypeEnumToString)(n),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<d;n++){const r=c.HEAPU32[t++],a=n===d-1?void 0:c.HEAPU32[t]-r;e.push(c.UTF8ToString(r,a))}w.push([a,p,e])}else{const e=new((0,s.tensorTypeToTypedArrayConstructor)(a))(d);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(c.HEAPU8.subarray(o,o+e.byteLength)),w.push([a,p,e])}}finally{c.stackRestore(n),\\\"string\\\"===a&&o&&c._free(o),c._OrtReleaseTensor(t)}}if(0===i)return w;throw new Error(`failed to call OrtRun(). error code = ${i}.`)}finally{c.stackRestore(e)}}finally{y.forEach(c._OrtReleaseTensor),w.forEach(c._free),c._OrtReleaseRunOptions(v),b.forEach(c._free)}},t.endProfiling=e=>{const t=(0,u.getInstance)(),n=l.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(n(449)),s=n(377),u=n(711);let l,c=!1,p=!1,d=!1;t.initializeWebAssembly=async e=>{if(c)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),f=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),h=e.wasmPaths,g=\\\"string\\\"==typeof h?h:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(f,o),v=\\\"object\\\"==typeof h?h[m]:void 0;let b=!1;const y=[];if(t>0&&y.push(new Promise((e=>{setTimeout((()=>{b=!0,e()}),t)}))),y.push(new Promise(((e,t)=>{const r=o?u:s,a={locateFile:(e,t)=>{if(o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob)return URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"}));if(e.endsWith(\\\".wasm\\\")){if(v)return v;const e=null!=g?g:t;return\\\"ort-wasm-simd.wasm\\\"===m?e+\\\"ort-wasm-simd.jsep.wasm\\\":\\\"ort-wasm-simd-threaded.wasm\\\"===m?e+\\\"ort-wasm-simd-threaded.jsep.wasm\\\":e+m}return t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{p=!1,c=!0,l=t,e()}),(e=>{p=!1,d=!0,t(e)}))}))),await Promise.race(y),b)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(c&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!c||p||d||(p=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,p=!1,c=!1,d=!0)}},711:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e={}){function t(){return M.buffer!=k.buffer&&j(),k}function r(){return M.buffer!=k.buffer&&j(),D}function a(){return M.buffer!=k.buffer&&j(),I}function o(){return M.buffer!=k.buffer&&j(),U}function i(){return M.buffer!=k.buffer&&j(),W}var s,u,l;s||(s=void 0!==e?e:{}),s.ready=new Promise(((e,t)=>{u=e,l=t})),s.jsepInit=function(e,t,n,r,a,o,i,u){s.Kb=e,s.qb=t,s.sb=n,s.cb=r,s.rb=a,s.Aa=o,s.tb=i,s.ub=u};var c,p,d,f=Object.assign({},s),h=\\\"./this.program\\\",g=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,v=\\\"function\\\"==typeof importScripts,b=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,y=s.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function _(e){return s.locateFile?s.locateFile(e,w):w+e}if(b){var $=n(384),S=n(908);let e;w=v?S.dirname(w)+\\\"/\\\":\\\"//\\\",c=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),$.readFileSync(e,t?void 0:\\\"utf8\\\")),d=e=>((e=c(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),$.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),g=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\\\"[Emscripten Module object]\\\";try{e=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=e.Worker}else(m||v)&&(v?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",b||(c=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},v&&(d=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),p=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));b&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var A=console.log.bind(console),C=console.warn.bind(console);b&&(A=(...e)=>$.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),C=(...e)=>$.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var O,P=s.print||A,E=s.printErr||C;Object.assign(s,f),f=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(g=s.quit),s.wasmBinary&&(O=s.wasmBinary);var T=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&J(\\\"no native wasm support detected\\\");var M,x,R,k,D,I,U,W,G=!1;function j(){var e=M.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=I=new Int32Array(e),s.HEAPU8=D=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=U=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=W=new Float64Array(e)}var B=s.INITIAL_MEMORY||16777216;if(5242880<=B||J(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+B+\\\"! (STACK_SIZE=5242880)\\\"),y)M=s.wasmMemory;else if(s.wasmMemory)M=s.wasmMemory;else if(!((M=new WebAssembly.Memory({initial:B/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),b&&E(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");j(),B=M.buffer.byteLength;var z=[],H=[],F=[],L=0;function N(){return T||0<L}function K(){var e=s.preRun.shift();z.unshift(e)}var Y,V=0,q=null,X=null;function J(e){throw s.onAbort&&s.onAbort(e),E(e=\\\"Aborted(\\\"+e+\\\")\\\"),G=!0,R=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),l(e),e}function Z(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function Q(e){try{if(e==Y&&O)return new Uint8Array(O);if(d)return d(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){J(e)}}function ee(e,t,n){return function(e){if(!O&&(m||v)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>Q(e)));if(p)return new Promise(((t,n)=>{p(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>Q(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{E(\\\"failed to asynchronously prepare wasm: \\\"+e),J(e)}))}Z(Y=\\\"ort-wasm-simd-threaded.wasm\\\")||(Y=_(Y));var te={887608:()=>{s.jsepRunPromise=new Promise((function(e){s.vb=e}))},887703:e=>{s.vb(e)},887741:e=>s.qb(e),887774:e=>s.sb(e),887806:(e,t,n)=>{s.cb(e,t,n,!0)},887845:(e,t,n)=>{s.cb(e,t,n)},887878:e=>{s.Aa(\\\"Abs\\\",e,void 0)},887929:e=>{s.Aa(\\\"Neg\\\",e,void 0)},887980:e=>{s.Aa(\\\"Floor\\\",e,void 0)},888033:e=>{s.Aa(\\\"Ceil\\\",e,void 0)},888085:e=>{s.Aa(\\\"Reciprocal\\\",e,void 0)},888143:e=>{s.Aa(\\\"Sqrt\\\",e,void 0)},888195:e=>{s.Aa(\\\"Exp\\\",e,void 0)},888246:e=>{s.Aa(\\\"Erf\\\",e,void 0)},888297:e=>{s.Aa(\\\"Sigmoid\\\",e,void 0)},888352:e=>{s.Aa(\\\"Sin\\\",e,void 0)},888403:e=>{s.Aa(\\\"Cos\\\",e,void 0)},888454:e=>{s.Aa(\\\"Tan\\\",e,void 0)},888505:e=>{s.Aa(\\\"Asin\\\",e,void 0)},888557:e=>{s.Aa(\\\"Acos\\\",e,void 0)},888609:e=>{s.Aa(\\\"Atan\\\",e,void 0)},888661:e=>{s.Aa(\\\"Sinh\\\",e,void 0)},888713:e=>{s.Aa(\\\"Cosh\\\",e,void 0)},888765:e=>{s.Aa(\\\"Asinh\\\",e,void 0)},888818:e=>{s.Aa(\\\"Acosh\\\",e,void 0)},888871:e=>{s.Aa(\\\"Atanh\\\",e,void 0)},888924:(e,t,n)=>{s.Aa(\\\"ClipV10\\\",e,{min:t,max:n})},888996:e=>{s.Aa(\\\"Clip\\\",e,void 0)},889048:(e,t)=>{s.Aa(\\\"Elu\\\",e,{alpha:t})},889106:e=>{s.Aa(\\\"Relu\\\",e,void 0)},889158:(e,t)=>{s.Aa(\\\"LeakyRelu\\\",e,{alpha:t})},889222:(e,t)=>{s.Aa(\\\"ThresholdedRelu\\\",e,{alpha:t})},889292:e=>{s.Aa(\\\"Add\\\",e,void 0)},889343:e=>{s.Aa(\\\"Sub\\\",e,void 0)},889394:e=>{s.Aa(\\\"Mul\\\",e,void 0)},889445:e=>{s.Aa(\\\"Div\\\",e,void 0)},889496:e=>{s.Aa(\\\"Pow\\\",e,void 0)},889547:(e,t,n)=>{s.Aa(\\\"Transpose\\\",e,{perm:t?Array.from(a().subarray(n>>>0,n+t>>>0)):[]})},889660:(e,n,r,a,o,i,u,l,c,p)=>{s.Aa(\\\"Conv\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[o],pads:[i,u],strides:[l],w_is_const:()=>!!t()[p>>>0]})},889888:(e,n,r,a,o,i,u,l,c,p,d,f,h,g,m)=>{s.Aa(\\\"Conv\\\",e,{format:g?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:o,kernel_shape:[i,u],pads:[l,c,p,d],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},890147:(e,n,r,a,o,i,u,l,c,p)=>{s.Aa(\\\"Conv\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[o],pads:[i,u],strides:[l],w_is_const:()=>!!t()[p>>>0]})},890375:(e,n,r,a,o,i,u,l,c,p,d,f,h,g,m)=>{s.Aa(\\\"Conv\\\",e,{format:g?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:o,kernel_shape:[i,u],pads:[l,c,p,d],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},890634:(e,t)=>{s.Aa(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},890725:(e,t,n,r,a,o,i,u,l,c,p,d,f,h,g,m)=>{s.Aa(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[o,i],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},891009:(e,t)=>{s.Aa(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},891100:(e,t,n,r,a,o,i,u,l,c,p,d,f,h,g,m)=>{s.Aa(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[o,i],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},891384:(e,t)=>{s.Aa(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},891471:(e,t,n,r,a,o,i,u,l,c,p,d,f,h,g,m)=>{s.Aa(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[o,i],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},891751:(e,t)=>{s.Aa(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},891838:(e,t,n,r,a,o,i,u,l,c,p,d,f,h,g,m)=>{s.Aa(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[o,i],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},892118:(e,t,n,r,a)=>{s.Aa(\\\"Gemm\\\",e,{alpha:t,beta:n,transA:r,transB:a})},892222:e=>{s.Aa(\\\"MatMul\\\",e,void 0)},892276:e=>{s.tb(e)},892310:(e,t)=>s.ub(e,t)};function ne(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function re(e){e.terminate(),e.onmessage=()=>{}}function ae(e){(e=de.La[e])||J(),de.zb(e)}function oe(e){var t=de.ob();if(!t)return 6;de.Ta.push(t),de.La[e.Sa]=t,t.Sa=e.Sa;var n={cmd:\\\"run\\\",start_routine:e.Ab,arg:e.lb,pthread_ptr:e.Sa};return b&&t.unref(),t.postMessage(n,e.Gb),0}var ie=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function se(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&ie)return ie.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function ue(e,t){return(e>>>=0)?se(r(),e,t):\\\"\\\"}function le(e){if(y)return Ve(1,1,e);R=e,N()||(de.Bb(),s.onExit&&s.onExit(e),G=!0),g(e,new ne(e))}function ce(e){if(R=e,y)throw he(e),\\\"unwind\\\";le(e)}function pe(e){e instanceof ne||\\\"unwind\\\"==e||g(1,e)}var de={Wa:[],Ta:[],gb:[],La:{},$a:function(){y&&de.pb()},Jb:function(){},pb:function(){de.receiveObjectTransfer=de.yb,de.threadInitTLS=de.fb,de.setExitStatus=de.eb,T=!1},eb:function(e){R=e},Mb:[\\\"$terminateWorker\\\"],Bb:function(){for(var e of de.Ta)re(e);for(e of de.Wa)re(e);de.Wa=[],de.Ta=[],de.La=[]},zb:function(e){var t=e.Sa;delete de.La[t],de.Wa.push(e),de.Ta.splice(de.Ta.indexOf(e),1),e.Sa=0,Et(t)},yb:function(){},fb:function(){de.gb.forEach((e=>e()))},xb:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Sa&&(de.mb=e.Sa),n.targetThread&&n.targetThread!=St()){var a=de.La[n.Lb];a?a.postMessage(n,n.transferList):E('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===r?Ue():\\\"spawnThread\\\"===r?oe(n):\\\"cleanupThread\\\"===r?ae(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=de.La[n],delete de.La[n],re(r),Et(n),de.Ta.splice(de.Ta.indexOf(r),1),r.Sa=0):\\\"cancelThread\\\"===r?de.La[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t(e)):\\\"print\\\"===r?P(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?E(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===r?s[n.handler](...n.args):r&&E(\\\"worker sent an unknown command \\\"+r);de.mb=void 0},e.onerror=e=>{throw E(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},b&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var n,r=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])s.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:\\\"load\\\",handlers:r,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:M,wasmModule:x})})),wb:function(e){e()},kb:function(){var e=_(\\\"ort-wasm-simd-threaded.worker.js\\\");e=new Worker(e),de.Wa.push(e)},ob:function(){return 0==de.Wa.length&&(de.kb(),de.xb(de.Wa[0])),de.Wa.pop()}};function fe(e){for(;0<e.length;)e.shift()(s)}function he(e){if(y)return Ve(2,0,e);ce(e)}function ge(e){this.Za=e-24,this.jb=function(e){o()[this.Za+4>>2>>>0]=e},this.ib=function(e){o()[this.Za+8>>2>>>0]=e},this.$a=function(e,t){this.hb(),this.jb(e),this.ib(t)},this.hb=function(){o()[this.Za+16>>2>>>0]=0}}function me(e,t,n,r){return y?Ve(3,1,e,t,n,r):ve(e,t,n,r)}function ve(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return E(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return y&&0===a.length?me(e,t,n,r):(e={Ab:n,Sa:e,lb:r,Gb:a},y?(e.Ib=\\\"spawnThread\\\",postMessage(e,a),0):oe(e))}function be(e,t,n){return y?Ve(4,1,e,t,n):0}function ye(e,t){if(y)return Ve(5,1,e,t)}function we(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function _e(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function $e(e,t,n){return _e(e,r(),t,n)}function Se(e,t){if(y)return Ve(6,1,e,t)}function Ae(e,t,n){if(y)return Ve(7,1,e,t,n)}function Ce(e,t,n){return y?Ve(8,1,e,t,n):0}function Oe(e,t){if(y)return Ve(9,1,e,t)}function Pe(e,t,n){if(y)return Ve(10,1,e,t,n)}function Ee(e,t,n,r){if(y)return Ve(11,1,e,t,n,r)}function Te(e,t,n,r){if(y)return Ve(12,1,e,t,n,r)}function Me(e,t,n,r){if(y)return Ve(13,1,e,t,n,r)}function xe(e){if(y)return Ve(14,1,e)}function Re(e,t){if(y)return Ve(15,1,e,t)}function ke(e,t,n){if(y)return Ve(16,1,e,t,n)}function De(e){if(!G)try{if(e(),!N())try{y?Tt(R):ce(R)}catch(e){pe(e)}}catch(e){pe(e)}}function Ie(e){\\\"function\\\"==typeof Atomics.Hb&&(Atomics.Hb(a(),e>>2,e).value.then(Ue),e+=128,Atomics.store(a(),e>>2,1))}function Ue(){var e=St();e&&(Ie(e),De((()=>Mt())))}function We(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function Ge(e){return 0==e%4&&(0!=e%100||0==e%400)}s.PThread=de,s.establishStackSpace=function(){var e=St(),t=a()[e+52>>2>>>0];xt(t,t-(e=a()[e+56>>2>>>0])),kt(t)},s.invokeEntryPoint=function(e,t){e=Ut.apply(null,[e,t]),N()?de.eb(e):Tt(e)},s.__emscripten_thread_mailbox_await=Ie,s.checkMailbox=Ue;var je=[0,31,60,91,121,152,182,213,244,274,305,335],Be=[0,31,59,90,120,151,181,212,243,273,304,334];function ze(e){return(Ge(e.getFullYear())?je:Be)[e.getMonth()]+e.getDate()-1}function He(e,t,n,r,a,o,i){return y?Ve(17,1,e,t,n,r,a,o,i):-52}function Fe(e,t,n,r,a,o){if(y)return Ve(18,1,e,t,n,r,a,o)}function Le(e){var t=we(e)+1,n=At(t);return n&&$e(e,n,t),n}var Ne,Ke=[];function Ye(e,t,n){var o;for(Ke.length=0,n>>=2;o=r()[t++>>>0];)n+=105!=o&n,Ke.push(105==o?a()[n>>>0]:i()[n++>>>1]),++n;return te[e].apply(null,Ke)}function Ve(e,t){var n=arguments.length-2,r=arguments;return function(e){var t=Rt();return e=e(),kt(t),e}((()=>{for(var a=Dt(8*n),o=a>>3,s=0;s<n;s++){var u=r[2+s];i()[o+s>>>0]=u}return Pt(e,n,a,t)}))}Ne=b?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var qe,Xe=[],Je={};function Ze(){if(!qe){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:h||\\\"./this.program\\\"};for(e in Je)void 0===Je[e]?delete t[e]:t[e]=Je[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);qe=n}return qe}function Qe(e,n){if(y)return Ve(19,1,e,n);var r=0;return Ze().forEach((function(a,i){var s=n+r;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,r+=a.length+1})),0}function et(e,t){if(y)return Ve(20,1,e,t);var n=Ze();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function tt(e){return y?Ve(21,1,e):52}function nt(e,t,n,r){return y?Ve(22,1,e,t,n,r):52}function rt(e,t,n,r,a){return y?Ve(23,1,e,t,n,r,a):70}var at=[null,[],[]];function ot(e,t,n,a){if(y)return Ve(24,1,e,t,n,a);for(var i=0,s=0;s<n;s++){var u=o()[t>>2>>>0],l=o()[t+4>>2>>>0];t+=8;for(var c=0;c<l;c++){var p=r()[u+c>>>0],d=at[e];0===p||10===p?((1===e?P:E)(se(d,0)),d.length=0):d.push(p)}i+=l}return o()[a>>2>>>0]=i,0}function it(e){return(it=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(b)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}J(\\\"initRandomDevice\\\")}())(e)}var st=[31,29,31,30,31,30,31,31,30,31,30,31],ut=[31,28,31,30,31,30,31,31,30,31,30,31];function lt(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function l(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.Ua;for(e=new Date(new Date(e.Va+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Ge(e.getFullYear())?st:ut)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=l(new Date(e.getFullYear(),0,4)),n=l(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var p=a()[o+40>>2>>>0];for(var d in o={Eb:a()[o>>2>>>0],Db:a()[o+4>>2>>>0],Xa:a()[o+8>>2>>>0],bb:a()[o+12>>2>>>0],Ya:a()[o+16>>2>>>0],Va:a()[o+20>>2>>>0],Ra:a()[o+24>>2>>>0],Ua:a()[o+28>>2>>>0],Nb:a()[o+32>>2>>>0],Cb:a()[o+36>>2>>>0],Fb:p?ue(p):\\\"\\\"},r=ue(r),p={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(d,\\\"g\\\"),p[d]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),h=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(d in p={\\\"%a\\\":function(e){return f[e.Ra].substring(0,3)},\\\"%A\\\":function(e){return f[e.Ra]},\\\"%b\\\":function(e){return h[e.Ya].substring(0,3)},\\\"%B\\\":function(e){return h[e.Ya]},\\\"%C\\\":function(e){return s((e.Va+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.bb,2)},\\\"%e\\\":function(e){return i(e.bb,2,\\\" \\\")},\\\"%g\\\":function(e){return c(e).toString().substring(2)},\\\"%G\\\":function(e){return c(e)},\\\"%H\\\":function(e){return s(e.Xa,2)},\\\"%I\\\":function(e){return 0==(e=e.Xa)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Ya-1;t+=(Ge(e.Va+1900)?st:ut)[n++]);return s(e.bb+t,3)},\\\"%m\\\":function(e){return s(e.Ya+1,2)},\\\"%M\\\":function(e){return s(e.Db,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Xa&&12>e.Xa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.Eb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ra||7},\\\"%U\\\":function(e){return s(Math.floor((e.Ua+7-e.Ra)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Ua+7-(e.Ra+6)%7)/7);if(2>=(e.Ra+371-e.Ua-2)%7&&t++,t)53==t&&(4==(n=(e.Ra+371-e.Ua)%7)||3==n&&Ge(e.Va)||(t=1));else{t=52;var n=(e.Ra+7-e.Ua-1)%7;(4==n||5==n&&Ge(e.Va%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.Ra},\\\"%W\\\":function(e){return s(Math.floor((e.Ua+7-(e.Ra+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Va+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Va+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Cb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Fb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),p)r.includes(d)&&(r=r.replace(new RegExp(d,\\\"g\\\"),p[d](o)));return d=function(e){var t=Array(we(e)+1);return _e(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),d.length>n?0:(function(e,n){t().set(e,n>>>0)}(d,e),d.length-1)}function ct(e){try{e()}catch(e){J(e)}}var pt=0,dt=null,ft=0,ht=[],gt={},mt={},vt=0,bt=null,yt=[];function wt(e){if(!G){if(0===pt){var t=!1,n=!1;e(((e=0)=>{if(!G&&(ft=e,t=!0,n)){pt=2,ct((()=>jt(dt))),\\\"undefined\\\"!=typeof Browser&&Browser.ab.nb&&Browser.ab.resume(),e=!1;try{var r=function(){var e=a()[dt+8>>2>>>0];return e=s.asm[mt[e]],--L,e()}()}catch(t){r=t,e=!0}var o=!1;if(!dt){var i=bt;i&&(bt=null,(e?i.reject:i.resolve)(r),o=!0)}if(e&&!o)throw r}})),n=!0,t||(pt=1,dt=function(){var e=At(65548),t=e+12;a()[e>>2>>>0]=t,a()[e+4>>2>>>0]=t+65536,t=ht[0];var n=gt[t];return void 0===n&&(n=vt++,gt[t]=n,mt[n]=t),t=n,a()[e+8>>2>>>0]=t,e}(),\\\"undefined\\\"!=typeof Browser&&Browser.ab.nb&&Browser.ab.pause(),ct((()=>Wt(dt))))}else 2===pt?(pt=0,ct(Bt),Ct(dt),dt=null,yt.forEach((e=>De(e)))):J(\\\"invalid state: \\\"+pt);return ft}}de.$a();var _t=[null,le,he,me,be,ye,Se,Ae,Ce,Oe,Pe,Ee,Te,Me,xe,Re,ke,He,Fe,Qe,et,tt,nt,rt,ot],$t={r:function(e,t,n){return function(e){return wt((t=>{e().then(t)}))}((async()=>{await s.rb(e,t,n)}))},b:function(e,t,n){throw new ge(e).$a(t,n),e},$:function(){J(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},Q:function(e){Ot(e,!v,1,!m),de.fb()},l:function(e){y?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ae(e)},E:ve,i:be,W:ye,B:Se,D:Ae,X:Ce,U:Oe,L:Pe,T:Ee,p:Te,C:Me,z:xe,V:Re,A:ke,F:function(){return 131072},_:function(){return!0},x:function(e,t){e==t?setTimeout((()=>Ue())):y?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=de.La[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},O:function(){return-1},P:Ie,Z:function(e){b&&de.La[e].ref()},I:function(e,t){e=new Date(1e3*We(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},J:function(e,t){e=new Date(1e3*We(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=0|ze(e);a()[t+28>>2>>>0]=n,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),n=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n)),a()[t+32>>2>>>0]=e},K:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,o);return 0>n?a()[e+32>>2>>>0]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),a()[e+24>>2>>>0]=t.getDay(),n=0|ze(t),a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},G:He,H:Fe,w:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var l=u.getTimezoneOffset(),c=Math.max(i,l);o()[e>>2>>>0]=60*c,a()[t>>2>>>0]=Number(i!=l),e=r(s),t=r(u),e=Le(e),t=Le(t),l<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)},d:function(){J(\\\"\\\")},N:function(){J(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},c:function(e,t,n){return Ye(e,t,n)},k:function(e,t,n){return Ye(e,t,n)},m:function(){},q:function(){return Date.now()},Y:function(){throw L+=1,\\\"unwind\\\"},y:function(){return 4294901760},f:Ne,g:function(){return b?n(993).cpus().length:navigator.hardwareConcurrency},M:function(e,t,n){Xe.length=t,n>>=3;for(var r=0;r<t;r++)Xe[r]=i()[n+r>>>0];return(0>e?te[-e-1]:_t[e]).apply(null,Xe)},v:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var s=M.buffer;try{M.grow(i.call(o,4294901760,a)-s.byteLength+65535>>>16),j();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},R:Qe,S:et,j:ce,h:tt,o:nt,s:rt,n:ot,t:function(e,t){return it(r().subarray(e>>>0,e+t>>>0)),0},a:M||s.wasmMemory,u:lt,e:function(e,t,n,r){return lt(e,t,n,r)}};!function(){function e(e,t){return e=function(e){var t,n={};for(t in e)!function(t){var r=e[t];n[t]=\\\"function\\\"==typeof r?function(){ht.push(t);try{return r.apply(null,arguments)}finally{G||(ht.pop()===t||J(),dt&&1===pt&&0===ht.length&&(pt=0,L+=1,ct(Gt),\\\"undefined\\\"!=typeof Fibers&&Fibers.Ob()))}}:r}(t);return n}(e=e.exports),s.asm=e,de.gb.push(s.asm.za),H.unshift(s.asm.aa),x=t,de.wb((()=>{if(V--,s.monitorRunDependencies&&s.monitorRunDependencies(V),0==V&&(null!==q&&(clearInterval(q),q=null),X)){var e=X;X=null,e()}})),e}var t={a:$t};if(V++,s.monitorRunDependencies&&s.monitorRunDependencies(V),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){E(\\\"Module.instantiateWasm callback failed with error: \\\"+e),l(e)}(function(e,t){var n=Y;return O||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||Z(n)||n.startsWith(\\\"file://\\\")||b||\\\"function\\\"!=typeof fetch?ee(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return E(\\\"wasm streaming compile failed: \\\"+r),E(\\\"falling back to ArrayBuffer instantiation\\\"),ee(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(l)}(),s._OrtInit=function(){return(s._OrtInit=s.asm.ba).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.ca).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.da).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ea).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.fa).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ga).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.ha).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.ia).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ja).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.ka).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.la).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ma).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.na).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.oa).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.pa).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.qa).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.ra).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.sa).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.ta).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.ua).apply(null,arguments)},s._JsepOutput=function(){return(s._JsepOutput=s.asm.va).apply(null,arguments)};var St=s._pthread_self=function(){return(St=s._pthread_self=s.asm.wa).apply(null,arguments)},At=s._malloc=function(){return(At=s._malloc=s.asm.xa).apply(null,arguments)},Ct=s._free=function(){return(Ct=s._free=s.asm.ya).apply(null,arguments)};s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.za).apply(null,arguments)};var Ot=s.__emscripten_thread_init=function(){return(Ot=s.__emscripten_thread_init=s.asm.Ba).apply(null,arguments)};function Pt(){return(Pt=s.asm.Da).apply(null,arguments)}function Et(){return(Et=s.asm.Ea).apply(null,arguments)}s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.Ca).apply(null,arguments)};var Tt=s.__emscripten_thread_exit=function(){return(Tt=s.__emscripten_thread_exit=s.asm.Fa).apply(null,arguments)},Mt=s.__emscripten_check_mailbox=function(){return(Mt=s.__emscripten_check_mailbox=s.asm.Ga).apply(null,arguments)};function xt(){return(xt=s.asm.Ha).apply(null,arguments)}function Rt(){return(Rt=s.asm.Ia).apply(null,arguments)}function kt(){return(kt=s.asm.Ja).apply(null,arguments)}function Dt(){return(Dt=s.asm.Ka).apply(null,arguments)}var It,Ut=s.dynCall_ii=function(){return(Ut=s.dynCall_ii=s.asm.Ma).apply(null,arguments)};function Wt(){return(Wt=s.asm.Na).apply(null,arguments)}function Gt(){return(Gt=s.asm.Oa).apply(null,arguments)}function jt(){return(jt=s.asm.Pa).apply(null,arguments)}function Bt(){return(Bt=s.asm.Qa).apply(null,arguments)}function zt(){function e(){if(!It&&(It=!0,s.calledRun=!0,!G)&&(y||fe(H),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!y)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();F.unshift(e)}fe(F)}}if(!(0<V))if(y)u(s),y||fe(H),startWorker(s);else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)K();fe(z),0<V||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.___start_em_js=892345,s.___stop_em_js=892506,s.keepRuntimeAlive=N,s.wasmMemory=M,s.stackAlloc=Dt,s.stackSave=Rt,s.stackRestore=kt,s.UTF8ToString=ue,s.stringToUTF8=$e,s.lengthBytesUTF8=we,s.ExitStatus=ne,s.PThread=de,X=function e(){It||zt(),It||(X=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return zt(),e.ready});e.exports=r},377:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e={}){var t,r,a;t||(t=void 0!==e?e:{}),t.ready=new Promise(((e,t)=>{r=e,a=t})),t.jsepInit=function(e,n,r,a,o,i,s,u){t.Ta=e,t.Fa=n,t.Ha=r,t.Da=a,t.Ga=o,t.na=i,t.Ia=s,t.Ja=u};var o,i,s,u=Object.assign({},t),l=\\\"./this.program\\\",c=(e,t)=>{throw t},p=\\\"object\\\"==typeof window,d=\\\"function\\\"==typeof importScripts,f=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";if(f){var g=n(384),m=n(908);h=d?m.dirname(h)+\\\"/\\\":\\\"//\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!t.thisProgram&&1<process.argv.length&&(l=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),c=(e,t)=>{throw process.exitCode=e,t},t.inspect=()=>\\\"[Emscripten Module object]\\\"}else(p||d)&&(d?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},d&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var v,b=t.print||console.log.bind(console),y=t.printErr||console.warn.bind(console);Object.assign(t,u),u=null,t.thisProgram&&(l=t.thisProgram),t.quit&&(c=t.quit),t.wasmBinary&&(v=t.wasmBinary);var w=t.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&G(\\\"no native wasm support detected\\\");var _,$,S,A,C,O,P,E=!1;function T(){var e=_.buffer;t.HEAP8=S=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=C=new Int32Array(e),t.HEAPU8=A=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=O=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=P=new Float64Array(e)}var M=[],x=[],R=[];function k(){var e=t.preRun.shift();M.unshift(e)}var D,I=0,U=null,W=null;function G(e){throw t.onAbort&&t.onAbort(e),y(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,$=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function j(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!j(D=\\\"ort-wasm-simd.wasm\\\")){var B=D;D=t.locateFile?t.locateFile(B,h):h+B}function z(e){try{if(e==D&&v)return new Uint8Array(v);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){G(e)}}function H(e,t,n){return function(e){if(!v&&(p||d)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>z(e)));if(i)return new Promise(((t,n)=>{i(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>z(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{y(\\\"failed to asynchronously prepare wasm: \\\"+e),G(e)}))}var F={883936:()=>{t.jsepRunPromise=new Promise((function(e){t.Ka=e}))},884031:e=>{t.Ka(e)},884069:e=>t.Fa(e),884102:e=>t.Ha(e),884134:(e,n,r)=>{t.Da(e,n,r,!0)},884173:(e,n,r)=>{t.Da(e,n,r)},884206:e=>{t.na(\\\"Abs\\\",e,void 0)},884257:e=>{t.na(\\\"Neg\\\",e,void 0)},884308:e=>{t.na(\\\"Floor\\\",e,void 0)},884361:e=>{t.na(\\\"Ceil\\\",e,void 0)},884413:e=>{t.na(\\\"Reciprocal\\\",e,void 0)},884471:e=>{t.na(\\\"Sqrt\\\",e,void 0)},884523:e=>{t.na(\\\"Exp\\\",e,void 0)},884574:e=>{t.na(\\\"Erf\\\",e,void 0)},884625:e=>{t.na(\\\"Sigmoid\\\",e,void 0)},884680:e=>{t.na(\\\"Sin\\\",e,void 0)},884731:e=>{t.na(\\\"Cos\\\",e,void 0)},884782:e=>{t.na(\\\"Tan\\\",e,void 0)},884833:e=>{t.na(\\\"Asin\\\",e,void 0)},884885:e=>{t.na(\\\"Acos\\\",e,void 0)},884937:e=>{t.na(\\\"Atan\\\",e,void 0)},884989:e=>{t.na(\\\"Sinh\\\",e,void 0)},885041:e=>{t.na(\\\"Cosh\\\",e,void 0)},885093:e=>{t.na(\\\"Asinh\\\",e,void 0)},885146:e=>{t.na(\\\"Acosh\\\",e,void 0)},885199:e=>{t.na(\\\"Atanh\\\",e,void 0)},885252:(e,n,r)=>{t.na(\\\"ClipV10\\\",e,{min:n,max:r})},885324:e=>{t.na(\\\"Clip\\\",e,void 0)},885376:(e,n)=>{t.na(\\\"Elu\\\",e,{alpha:n})},885434:e=>{t.na(\\\"Relu\\\",e,void 0)},885486:(e,n)=>{t.na(\\\"LeakyRelu\\\",e,{alpha:n})},885550:(e,n)=>{t.na(\\\"ThresholdedRelu\\\",e,{alpha:n})},885620:e=>{t.na(\\\"Add\\\",e,void 0)},885671:e=>{t.na(\\\"Sub\\\",e,void 0)},885722:e=>{t.na(\\\"Mul\\\",e,void 0)},885773:e=>{t.na(\\\"Div\\\",e,void 0)},885824:e=>{t.na(\\\"Pow\\\",e,void 0)},885875:(e,n,r)=>{t.na(\\\"Transpose\\\",e,{perm:n?Array.from(C.subarray(r>>>0,r+n>>>0)):[]})},885988:(e,n,r,a,o,i,s,u,l,c)=>{t.na(\\\"Conv\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[o],pads:[i,s],strides:[u],w_is_const:()=>!!S[c>>>0]})},886216:(e,n,r,a,o,i,s,u,l,c,p,d,f,h,g)=>{t.na(\\\"Conv\\\",e,{format:h?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:o,kernel_shape:[i,s],pads:[u,l,c,p],strides:[d,f],w_is_const:()=>!!S[g>>>0]})},886475:(e,n,r,a,o,i,s,u,l,c)=>{t.na(\\\"Conv\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[o],pads:[i,s],strides:[u],w_is_const:()=>!!S[c>>>0]})},886703:(e,n,r,a,o,i,s,u,l,c,p,d,f,h,g)=>{t.na(\\\"Conv\\\",e,{format:h?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:o,kernel_shape:[i,s],pads:[u,l,c,p],strides:[d,f],w_is_const:()=>!!S[g>>>0]})},886962:(e,n)=>{t.na(\\\"GlobalAveragePool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},887053:(e,n,r,a,o,i,s,u,l,c,p,d,f,h,g,m)=>{t.na(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:o,dilations:[i,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},887337:(e,n)=>{t.na(\\\"GlobalAveragePool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},887428:(e,n,r,a,o,i,s,u,l,c,p,d,f,h,g,m)=>{t.na(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:o,dilations:[i,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},887712:(e,n)=>{t.na(\\\"GlobalMaxPool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},887799:(e,n,r,a,o,i,s,u,l,c,p,d,f,h,g,m)=>{t.na(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:o,dilations:[i,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},888079:(e,n)=>{t.na(\\\"GlobalMaxPool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},888166:(e,n,r,a,o,i,s,u,l,c,p,d,f,h,g,m)=>{t.na(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:o,dilations:[i,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},888446:(e,n,r,a,o)=>{t.na(\\\"Gemm\\\",e,{alpha:n,beta:r,transA:a,transB:o})},888550:e=>{t.na(\\\"MatMul\\\",e,void 0)},888604:e=>{t.Ia(e)},888638:(e,n)=>t.Ja(e,n)};function L(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function N(e){for(;0<e.length;)e.shift()(t)}function K(e){this.Ba=e-24,this.Sa=function(e){O[this.Ba+4>>2>>>0]=e},this.Ra=function(e){O[this.Ba+8>>2>>>0]=e},this.La=function(e,t){this.Qa(),this.Sa(e),this.Ra(t)},this.Qa=function(){O[this.Ba+16>>2>>>0]=0}}var Y=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function V(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&Y)return Y.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function q(e,t){return(e>>>=0)?V(A,e,t):\\\"\\\"}function X(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function J(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function Z(e,t,n){return J(e,A,t,n)}function Q(e){return 0==e%4&&(0!=e%100||0==e%400)}var ee=[0,31,60,91,121,152,182,213,244,274,305,335],te=[0,31,59,90,120,151,181,212,243,273,304,334];function ne(e){return(Q(e.getFullYear())?ee:te)[e.getMonth()]+e.getDate()-1}function re(e){var t=X(e)+1,n=Te(t);return n&&Z(e,n,t),n}var ae=[];function oe(e,t,n){var r;for(ae.length=0,n>>=2;r=A[t++>>>0];)n+=105!=r&n,ae.push(105==r?C[n>>>0]:P[n++>>>1]),++n;return F[e].apply(null,ae)}var ie,se={};function ue(){if(!ie){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:l||\\\"./this.program\\\"};for(e in se)void 0===se[e]?delete t[e]:t[e]=se[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);ie=n}return ie}function le(e){$=$=e,w||(t.onExit&&t.onExit(e),E=!0),c(e,new L(e))}var ce=[null,[],[]];function pe(e){return(pe=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);if(f)try{var e=n(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}G(\\\"initRandomDevice\\\")}())(e)}var de=[31,29,31,30,31,30,31,31,30,31,30,31],fe=[31,28,31,30,31,30,31,31,30,31,30,31];function he(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.wa;for(e=new Date(new Date(e.xa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Q(e.getFullYear())?de:fe)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=C[r+40>>2>>>0];for(var c in r={Oa:C[r>>2>>>0],Na:C[r+4>>2>>>0],ya:C[r+8>>2>>>0],Ca:C[r+12>>2>>>0],za:C[r+16>>2>>>0],xa:C[r+20>>2>>>0],ra:C[r+24>>2>>>0],wa:C[r+28>>2>>>0],Ua:C[r+32>>2>>>0],Ma:C[r+36>>2>>>0],Pa:l?q(l):\\\"\\\"},n=q(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(c,\\\"g\\\"),l[c]);var p=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(c in l={\\\"%a\\\":function(e){return p[e.ra].substring(0,3)},\\\"%A\\\":function(e){return p[e.ra]},\\\"%b\\\":function(e){return d[e.za].substring(0,3)},\\\"%B\\\":function(e){return d[e.za]},\\\"%C\\\":function(e){return o((e.xa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.Ca,2)},\\\"%e\\\":function(e){return a(e.Ca,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.ya,2)},\\\"%I\\\":function(e){return 0==(e=e.ya)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.za-1;t+=(Q(e.xa+1900)?de:fe)[n++]);return o(e.Ca+t,3)},\\\"%m\\\":function(e){return o(e.za+1,2)},\\\"%M\\\":function(e){return o(e.Na,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.ya&&12>e.ya?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Oa,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ra||7},\\\"%U\\\":function(e){return o(Math.floor((e.wa+7-e.ra)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.wa+7-(e.ra+6)%7)/7);if(2>=(e.ra+371-e.wa-2)%7&&t++,t)53==t&&(4==(n=(e.ra+371-e.wa)%7)||3==n&&Q(e.xa)||(t=1));else{t=52;var n=(e.ra+7-e.wa-1)%7;(4==n||5==n&&Q(e.xa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ra},\\\"%W\\\":function(e){return o(Math.floor((e.wa+7-(e.ra+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.xa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.xa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ma);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Pa},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(c)&&(n=n.replace(new RegExp(c,\\\"g\\\"),l[c](r)));return c=function(e){var t=Array(X(e)+1);return J(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),c.length>t?0:(S.set(c,e>>>0),c.length-1)}function ge(e){try{e()}catch(e){G(e)}}function me(e){e instanceof L||\\\"unwind\\\"==e||c(1,e)}var ve=0,be=null,ye=0,we=[],_e={},$e={},Se=0,Ae=null,Ce=[];function Oe(e){if(!E){if(0===ve){var n=!1,r=!1;e(((e=0)=>{if(!E&&(ye=e,n=!0,r)){ve=2,ge((()=>Ue(be))),\\\"undefined\\\"!=typeof Browser&&Browser.Aa.Ea&&Browser.Aa.resume(),e=!1;try{var a=(0,t.asm[$e[C[be+8>>2>>>0]]])()}catch(t){a=t,e=!0}var o=!1;if(!be){var i=Ae;i&&(Ae=null,(e?i.reject:i.resolve)(a),o=!0)}if(e&&!o)throw a}})),r=!0,n||(ve=1,be=function(){var e=Te(65548),t=e+12;C[e>>2>>>0]=t,C[e+4>>2>>>0]=t+65536,t=we[0];var n=_e[t];return void 0===n&&(n=Se++,_e[t]=n,$e[n]=t),C[e+8>>2>>>0]=n,e}(),\\\"undefined\\\"!=typeof Browser&&Browser.Aa.Ea&&Browser.Aa.pause(),ge((()=>De(be))))}else 2===ve?(ve=0,ge(We),Me(be),be=null,Ce.forEach((e=>{if(!E)try{if(e(),!w)try{le($)}catch(e){me(e)}}catch(e){me(e)}}))):G(\\\"invalid state: \\\"+ve);return ye}}var Pe={o:function(e,n,r){return function(e){return Oe((t=>{e().then(t)}))}((async()=>{await t.Ga(e,n,r)}))},a:function(e,t,n){throw new K(e).La(t,n),e},m:function(){G(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},g:function(){return 0},M:function(){},x:function(){},z:function(){},O:function(){return 0},K:function(){},G:function(){},J:function(){},k:function(){},y:function(){},v:function(){},L:function(){},w:function(){},P:function(){return!0},D:function(e,t){e=new Date(1e3*(O[e>>>2]+4294967296*C[e+4>>>2])),C[t>>2>>>0]=e.getUTCSeconds(),C[t+4>>2>>>0]=e.getUTCMinutes(),C[t+8>>2>>>0]=e.getUTCHours(),C[t+12>>2>>>0]=e.getUTCDate(),C[t+16>>2>>>0]=e.getUTCMonth(),C[t+20>>2>>>0]=e.getUTCFullYear()-1900,C[t+24>>2>>>0]=e.getUTCDay(),C[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},E:function(e,t){e=new Date(1e3*(O[e>>>2]+4294967296*C[e+4>>>2])),C[t>>2>>>0]=e.getSeconds(),C[t+4>>2>>>0]=e.getMinutes(),C[t+8>>2>>>0]=e.getHours(),C[t+12>>2>>>0]=e.getDate(),C[t+16>>2>>>0]=e.getMonth(),C[t+20>>2>>>0]=e.getFullYear()-1900,C[t+24>>2>>>0]=e.getDay(),C[t+28>>2>>>0]=0|ne(e),C[t+36>>2>>>0]=-60*e.getTimezoneOffset();var n=new Date(e.getFullYear(),6,1).getTimezoneOffset(),r=new Date(e.getFullYear(),0,1).getTimezoneOffset();C[t+32>>2>>>0]=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n))},F:function(e){var t=new Date(C[e+20>>2>>>0]+1900,C[e+16>>2>>>0],C[e+12>>2>>>0],C[e+8>>2>>>0],C[e+4>>2>>>0],C[e>>2>>>0],0),n=C[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>n?C[e+32>>2>>>0]=Number(a!=o&&i==r):0<n!=(i==r)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<n?i:a)-r))),C[e+24>>2>>>0]=t.getDay(),C[e+28>>2>>>0]=0|ne(t),C[e>>2>>>0]=t.getSeconds(),C[e+4>>2>>>0]=t.getMinutes(),C[e+8>>2>>>0]=t.getHours(),C[e+12>>2>>>0]=t.getDate(),C[e+16>>2>>>0]=t.getMonth(),C[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},A:function(){return-52},C:function(){},t:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();O[e>>2>>>0]=60*Math.max(a,s),C[t>>2>>>0]=Number(a!=s),e=r(o),t=r(i),e=re(e),t=re(t),s<a?(O[n>>2>>>0]=e,O[n+4>>2>>>0]=t):(O[n>>2>>>0]=t,O[n+4>>2>>>0]=e)},e:function(){G(\\\"\\\")},B:function(){G(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},b:function(e,t,n){return oe(e,t,n)},h:function(e,t,n){return oe(e,t,n)},l:function(){return Date.now()},u:function(){return 4294901760},d:f?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),N:function(e,t,n){A.copyWithin(e>>>0,t>>>0,t+n>>>0)},s:function(e){var t=A.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math,o=a.min;r=Math.max(e,r),r+=(65536-r%65536)%65536;e:{var i=_.buffer;try{_.grow(o.call(a,4294901760,r)-i.byteLength+65535>>>16),T();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},H:function(e,t){var n=0;return ue().forEach((function(r,a){var o=t+n;for(a=O[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)S[a++>>0>>>0]=r.charCodeAt(o);S[a>>0>>>0]=0,n+=r.length+1})),0},I:function(e,t){var n=ue();O[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),O[t>>2>>>0]=r,0},n:le,f:function(){return 52},j:function(){return 52},p:function(){return 70},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=O[t>>2>>>0],s=O[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var l=A[i+u>>>0],c=ce[e];0===l||10===l?((1===e?b:y)(V(c,0)),c.length=0):c.push(l)}a+=s}return O[r>>2>>>0]=a,0},q:function(e,t){return pe(A.subarray(e>>>0,e+t>>>0)),0},r:he,c:function(e,t,n,r){return he(e,t,n,r)}};!function(){function e(e){if(e=function(e){var t,n={};for(t in e)!function(t){var r=e[t];n[t]=\\\"function\\\"==typeof r?function(){we.push(t);try{return r.apply(null,arguments)}finally{E||(we.pop()===t||G(),be&&1===ve&&0===we.length&&(ve=0,ge(Ie),\\\"undefined\\\"!=typeof Fibers&&Fibers.Va()))}}:r}(t);return n}(e=e.exports),t.asm=e,_=t.asm.Q,T(),x.unshift(t.asm.R),I--,t.monitorRunDependencies&&t.monitorRunDependencies(I),0==I&&(null!==U&&(clearInterval(U),U=null),W)){var n=W;W=null,n()}return e}var n={a:Pe};if(I++,t.monitorRunDependencies&&t.monitorRunDependencies(I),t.instantiateWasm)try{return t.instantiateWasm(n,e)}catch(e){y(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,t){var n=D;return v||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||j(n)||n.startsWith(\\\"file://\\\")||f||\\\"function\\\"!=typeof fetch?H(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return y(\\\"wasm streaming compile failed: \\\"+r),y(\\\"falling back to ArrayBuffer instantiation\\\"),H(n,e,t)}))))})(n,(function(t){e(t.instance)})).catch(a)}(),t._OrtInit=function(){return(t._OrtInit=t.asm.S).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.T).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.U).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.V).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.W).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.X).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.Y).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.Z).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm._).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.$).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.aa).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.ba).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.ca).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.da).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.ea).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.fa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ga).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ha).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ia).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ja).apply(null,arguments)},t._JsepOutput=function(){return(t._JsepOutput=t.asm.ka).apply(null,arguments)};var Ee,Te=t._malloc=function(){return(Te=t._malloc=t.asm.la).apply(null,arguments)},Me=t._free=function(){return(Me=t._free=t.asm.ma).apply(null,arguments)};function xe(){return(xe=t.asm.oa).apply(null,arguments)}function Re(){return(Re=t.asm.pa).apply(null,arguments)}function ke(){return(ke=t.asm.qa).apply(null,arguments)}function De(){return(De=t.asm.sa).apply(null,arguments)}function Ie(){return(Ie=t.asm.ta).apply(null,arguments)}function Ue(){return(Ue=t.asm.ua).apply(null,arguments)}function We(){return(We=t.asm.va).apply(null,arguments)}function Ge(){function e(){if(!Ee&&(Ee=!0,t.calledRun=!0,!E)){if(N(x),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();R.unshift(e)}N(R)}}if(!(0<I)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)k();N(M),0<I||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.___start_em_js=888673,t.___stop_em_js=888834,t.stackAlloc=ke,t.stackSave=xe,t.stackRestore=Re,t.UTF8ToString=q,t.stringToUTF8=Z,t.lengthBytesUTF8=X,W=function e(){Ee||Ge(),Ee||(W=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return Ge(),e.ready});e.exports=r},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(n(\\\"worker.js received unknown command \\\"+r.data.cmd),n(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},760:()=>{},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const e=n(259),t=n(263);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(n.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:r})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in;(0,e.run)(t,r,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","\r\nvar ortWasmThreaded = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasmThreaded = {})  {\r\n\r\nfunction c(){l.buffer!=m.buffer&&q();return m}function w(){l.buffer!=m.buffer&&q();return aa}function x(){l.buffer!=m.buffer&&q();return ba}function y(){l.buffer!=m.buffer&&q();return ca}function da(){l.buffer!=m.buffer&&q();return ea}var B;B||(B=typeof ortWasmThreaded !== 'undefined' ? ortWasmThreaded : {});var fa,C;B.ready=new Promise((a,b)=>{fa=a;C=b});\"use strict\";B.jsepInit=function(a,b,d,e,h,g,k,n){B.Kb=a;B.qb=b;B.sb=d;B.cb=e;B.rb=h;B.Aa=g;B.tb=k;B.ub=n};\r\nvar ha=Object.assign({},B),ia=\"./this.program\",D=(a,b)=>{throw b;},ja=\"object\"==typeof window,E=\"function\"==typeof importScripts,F=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,G=B.ENVIRONMENT_IS_PTHREAD||!1,H=\"\";function ka(a){return B.locateFile?B.locateFile(a,H):H+a}var la,I,J;\r\nif(F){var fs=require(\"fs\"),ma=require(\"path\");H=E?ma.dirname(H)+\"/\":__dirname+\"/\";la=(b,d)=>{b=b.startsWith(\"file://\")?new URL(b):ma.normalize(b);return fs.readFileSync(b,d?void 0:\"utf8\")};J=b=>{b=la(b,!0);b.buffer||(b=new Uint8Array(b));return b};I=(b,d,e,h=!0)=>{b=b.startsWith(\"file://\")?new URL(b):ma.normalize(b);fs.readFile(b,h?void 0:\"utf8\",(g,k)=>{g?e(g):d(h?k.buffer:k)})};!B.thisProgram&&1<process.argv.length&&(ia=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);D=(b,d)=>{process.exitCode=\r\nb;throw d;};B.inspect=()=>\"[Emscripten Module object]\";let a;try{a=require(\"worker_threads\")}catch(b){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),b;}global.Worker=a.Worker}else if(ja||E)E?H=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(H=document.currentScript.src),_scriptDir&&(H=_scriptDir),0!==H.indexOf(\"blob:\")?H=H.substr(0,H.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):H=\"\",F||(la=a=>{var b=\r\nnew XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},E&&(J=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),I=(a,b,d)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):d()};e.onerror=d;e.send(null)});F&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);\r\nvar na=console.log.bind(console),oa=console.warn.bind(console);F&&(na=(...a)=>fs.writeSync(1,a.join(\" \")+\"\\n\"),oa=(...a)=>fs.writeSync(2,a.join(\" \")+\"\\n\"));var pa=B.print||na,K=B.printErr||oa;Object.assign(B,ha);ha=null;B.thisProgram&&(ia=B.thisProgram);B.quit&&(D=B.quit);var L;B.wasmBinary&&(L=B.wasmBinary);var noExitRuntime=B.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&N(\"no native wasm support detected\");var l,qa,O=!1,P,m,aa,ba,ca,ea;\r\nfunction q(){var a=l.buffer;B.HEAP8=m=new Int8Array(a);B.HEAP16=new Int16Array(a);B.HEAP32=ba=new Int32Array(a);B.HEAPU8=aa=new Uint8Array(a);B.HEAPU16=new Uint16Array(a);B.HEAPU32=ca=new Uint32Array(a);B.HEAPF32=new Float32Array(a);B.HEAPF64=ea=new Float64Array(a)}var Q=B.INITIAL_MEMORY||16777216;5242880<=Q||N(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+Q+\"! (STACK_SIZE=5242880)\");\r\nif(G)l=B.wasmMemory;else if(B.wasmMemory)l=B.wasmMemory;else if(l=new WebAssembly.Memory({initial:Q/65536,maximum:65536,shared:!0}),!(l.buffer instanceof SharedArrayBuffer))throw K(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),F&&K(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),\r\nError(\"bad memory\");q();Q=l.buffer.byteLength;var ra=[],sa=[],ta=[],R=0;function ua(){return noExitRuntime||0<R}function va(){var a=B.preRun.shift();ra.unshift(a)}var S=0,wa=null,T=null;function N(a){if(B.onAbort)B.onAbort(a);a=\"Aborted(\"+a+\")\";K(a);O=!0;P=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");C(a);throw a;}function xa(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var U;U=\"ort-wasm-simd-threaded.wasm\";xa(U)||(U=ka(U));\r\nfunction ya(a){try{if(a==U&&L)return new Uint8Array(L);if(J)return J(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){N(b)}}function za(a){if(!L&&(ja||E)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ya(a));if(I)return new Promise((b,d)=>{I(a,e=>b(new Uint8Array(e)),d)})}return Promise.resolve().then(()=>ya(a))}\r\nfunction Aa(a,b,d){return za(a).then(e=>WebAssembly.instantiate(e,b)).then(e=>e).then(d,e=>{K(\"failed to asynchronously prepare wasm: \"+e);N(e)})}\r\nfunction Ba(a,b){var d=U;return L||\"function\"!=typeof WebAssembly.instantiateStreaming||xa(d)||d.startsWith(\"file://\")||F||\"function\"!=typeof fetch?Aa(d,a,b):fetch(d,{credentials:\"same-origin\"}).then(e=>WebAssembly.instantiateStreaming(e,a).then(b,function(h){K(\"wasm streaming compile failed: \"+h);K(\"falling back to ArrayBuffer instantiation\");return Aa(d,a,b)}))}\r\nvar Ca={887608:()=>{B.jsepRunPromise=new Promise(function(a){B.vb=a})},887703:a=>{B.vb(a)},887741:a=>B.qb(a),887774:a=>B.sb(a),887806:(a,b,d)=>{B.cb(a,b,d,!0)},887845:(a,b,d)=>{B.cb(a,b,d)},887878:a=>{B.Aa(\"Abs\",a,void 0)},887929:a=>{B.Aa(\"Neg\",a,void 0)},887980:a=>{B.Aa(\"Floor\",a,void 0)},888033:a=>{B.Aa(\"Ceil\",a,void 0)},888085:a=>{B.Aa(\"Reciprocal\",a,void 0)},888143:a=>{B.Aa(\"Sqrt\",a,void 0)},888195:a=>{B.Aa(\"Exp\",a,void 0)},888246:a=>{B.Aa(\"Erf\",a,void 0)},888297:a=>{B.Aa(\"Sigmoid\",a,void 0)},\r\n888352:a=>{B.Aa(\"Sin\",a,void 0)},888403:a=>{B.Aa(\"Cos\",a,void 0)},888454:a=>{B.Aa(\"Tan\",a,void 0)},888505:a=>{B.Aa(\"Asin\",a,void 0)},888557:a=>{B.Aa(\"Acos\",a,void 0)},888609:a=>{B.Aa(\"Atan\",a,void 0)},888661:a=>{B.Aa(\"Sinh\",a,void 0)},888713:a=>{B.Aa(\"Cosh\",a,void 0)},888765:a=>{B.Aa(\"Asinh\",a,void 0)},888818:a=>{B.Aa(\"Acosh\",a,void 0)},888871:a=>{B.Aa(\"Atanh\",a,void 0)},888924:(a,b,d)=>{B.Aa(\"ClipV10\",a,{min:b,max:d})},888996:a=>{B.Aa(\"Clip\",a,void 0)},889048:(a,b)=>{B.Aa(\"Elu\",a,{alpha:b})},889106:a=>\r\n{B.Aa(\"Relu\",a,void 0)},889158:(a,b)=>{B.Aa(\"LeakyRelu\",a,{alpha:b})},889222:(a,b)=>{B.Aa(\"ThresholdedRelu\",a,{alpha:b})},889292:a=>{B.Aa(\"Add\",a,void 0)},889343:a=>{B.Aa(\"Sub\",a,void 0)},889394:a=>{B.Aa(\"Mul\",a,void 0)},889445:a=>{B.Aa(\"Div\",a,void 0)},889496:a=>{B.Aa(\"Pow\",a,void 0)},889547:(a,b,d)=>{B.Aa(\"Transpose\",a,{perm:b?Array.from(x().subarray(d>>>0,d+b>>>0)):[]})},889660:(a,b,d,e,h,g,k,n,v,r)=>{B.Aa(\"Conv\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d],group:e,kernel_shape:[h],pads:[g,\r\nk],strides:[n],w_is_const:()=>!!c()[r>>>0]})},889888:(a,b,d,e,h,g,k,n,v,r,u,z,A,f,p)=>{B.Aa(\"Conv\",a,{format:f?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d,e],group:h,kernel_shape:[g,k],pads:[n,v,r,u],strides:[z,A],w_is_const:()=>!!c()[p>>>0]})},890147:(a,b,d,e,h,g,k,n,v,r)=>{B.Aa(\"Conv\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d],group:e,kernel_shape:[h],pads:[g,k],strides:[n],w_is_const:()=>!!c()[r>>>0]})},890375:(a,b,d,e,h,g,k,n,v,r,u,z,A,f,p)=>{B.Aa(\"Conv\",a,{format:f?\"NHWC\":\"NCHW\",auto_pad:b,\r\ndilations:[d,e],group:h,kernel_shape:[g,k],pads:[n,v,r,u],strides:[z,A],w_is_const:()=>!!c()[p>>>0]})},890634:(a,b)=>{B.Aa(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},890725:(a,b,d,e,h,g,k,n,v,r,u,z,A,f,p,t)=>{B.Aa(\"AveragePool\",a,{format:t?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:e,storage_order:h,dilations:[g,k],kernel_shape:[n,v],pads:[r,u,z,A],strides:[f,p]})},891009:(a,b)=>{B.Aa(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},891100:(a,b,d,e,h,g,k,n,v,r,u,z,A,f,p,t)=>{B.Aa(\"AveragePool\",\r\na,{format:t?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:e,storage_order:h,dilations:[g,k],kernel_shape:[n,v],pads:[r,u,z,A],strides:[f,p]})},891384:(a,b)=>{B.Aa(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},891471:(a,b,d,e,h,g,k,n,v,r,u,z,A,f,p,t)=>{B.Aa(\"MaxPool\",a,{format:t?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:e,storage_order:h,dilations:[g,k],kernel_shape:[n,v],pads:[r,u,z,A],strides:[f,p]})},891751:(a,b)=>{B.Aa(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},891838:(a,\r\nb,d,e,h,g,k,n,v,r,u,z,A,f,p,t)=>{B.Aa(\"MaxPool\",a,{format:t?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:e,storage_order:h,dilations:[g,k],kernel_shape:[n,v],pads:[r,u,z,A],strides:[f,p]})},892118:(a,b,d,e,h)=>{B.Aa(\"Gemm\",a,{alpha:b,beta:d,transA:e,transB:h})},892222:a=>{B.Aa(\"MatMul\",a,void 0)},892276:a=>{B.tb(a)},892310:(a,b)=>B.ub(a,b)};function Da(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction Ea(a){a.terminate();a.onmessage=()=>{}}function Fa(a){(a=V.La[a])||N();V.zb(a)}function Ga(a){var b=V.ob();if(!b)return 6;V.Ta.push(b);V.La[a.Sa]=b;b.Sa=a.Sa;var d={cmd:\"run\",start_routine:a.Ab,arg:a.lb,pthread_ptr:a.Sa};F&&b.unref();b.postMessage(d,a.Gb);return 0}var Ha=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction Ia(a,b,d){b>>>=0;var e=b+d;for(d=b;a[d]&&!(d>=e);)++d;if(16<d-b&&a.buffer&&Ha)return Ha.decode(a.buffer instanceof SharedArrayBuffer?a.slice(b,d):a.subarray(b,d));for(e=\"\";b<d;){var h=a[b++];if(h&128){var g=a[b++]&63;if(192==(h&224))e+=String.fromCharCode((h&31)<<6|g);else{var k=a[b++]&63;h=224==(h&240)?(h&15)<<12|g<<6|k:(h&7)<<18|g<<12|k<<6|a[b++]&63;65536>h?e+=String.fromCharCode(h):(h-=65536,e+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else e+=String.fromCharCode(h)}return e}\r\nfunction Ja(a,b){return(a>>>=0)?Ia(w(),a,b):\"\"}function Ka(a){if(G)return W(1,1,a);P=a;if(!ua()){V.Bb();if(B.onExit)B.onExit(a);O=!0}D(a,new Da(a))}function La(a){P=a;if(G)throw Ma(a),\"unwind\";Ka(a)}function Na(a){a instanceof Da||\"unwind\"==a||D(1,a)}\r\nvar V={Wa:[],Ta:[],gb:[],La:{},$a:function(){G&&V.pb()},Jb:function(){},pb:function(){V.receiveObjectTransfer=V.yb;V.threadInitTLS=V.fb;V.setExitStatus=V.eb;noExitRuntime=!1},eb:function(a){P=a},Mb:[\"$terminateWorker\"],Bb:function(){for(var a of V.Ta)Ea(a);for(a of V.Wa)Ea(a);V.Wa=[];V.Ta=[];V.La=[]},zb:function(a){var b=a.Sa;delete V.La[b];V.Wa.push(a);V.Ta.splice(V.Ta.indexOf(a),1);a.Sa=0;Oa(b)},yb:function(){},fb:function(){V.gb.forEach(a=>a())},xb:a=>new Promise(b=>{a.onmessage=g=>{g=g.data;var k=\r\ng.cmd;a.Sa&&(V.mb=a.Sa);if(g.targetThread&&g.targetThread!=Pa()){var n=V.La[g.Lb];n?n.postMessage(g,g.transferList):K('Internal error! Worker sent a message \"'+k+'\" to target pthread '+g.targetThread+\", but that thread no longer exists!\")}else if(\"checkMailbox\"===k)Qa();else if(\"spawnThread\"===k)Ga(g);else if(\"cleanupThread\"===k)Fa(g.thread);else if(\"killThread\"===k)g=g.thread,k=V.La[g],delete V.La[g],Ea(k),Oa(g),V.Ta.splice(V.Ta.indexOf(k),1),k.Sa=0;else if(\"cancelThread\"===k)V.La[g.thread].postMessage({cmd:\"cancel\"});\r\nelse if(\"loaded\"===k)a.loaded=!0,b(a);else if(\"print\"===k)pa(\"Thread \"+g.threadId+\": \"+g.text);else if(\"printErr\"===k)K(\"Thread \"+g.threadId+\": \"+g.text);else if(\"alert\"===k)alert(\"Thread \"+g.threadId+\": \"+g.text);else if(\"setimmediate\"===g.target)a.postMessage(g);else if(\"callHandler\"===k)B[g.handler](...g.args);else k&&K(\"worker sent an unknown command \"+k);V.mb=void 0};a.onerror=g=>{K(\"worker sent an error! \"+g.filename+\":\"+g.lineno+\": \"+g.message);throw g;};F&&(a.on(\"message\",function(g){a.onmessage({data:g})}),\r\na.on(\"error\",function(g){a.onerror(g)}));var d=[],e=[\"onExit\",\"onAbort\",\"print\",\"printErr\"],h;for(h of e)B.hasOwnProperty(h)&&d.push(h);a.postMessage({cmd:\"load\",handlers:d,urlOrBlob:B.mainScriptUrlOrBlob||_scriptDir,wasmMemory:l,wasmModule:qa})}),wb:function(a){a()},kb:function(){var a=ka(\"ort-wasm-simd-threaded.worker.js\");a=new Worker(a);V.Wa.push(a)},ob:function(){0==V.Wa.length&&(V.kb(),V.xb(V.Wa[0]));return V.Wa.pop()}};B.PThread=V;function Ra(a){for(;0<a.length;)a.shift()(B)}\r\nB.establishStackSpace=function(){var a=Pa(),b=x()[a+52>>2>>>0];a=x()[a+56>>2>>>0];Sa(b,b-a);Ta(b)};function Ma(a){if(G)return W(2,0,a);La(a)}B.invokeEntryPoint=function(a,b){a=Ua.apply(null,[a,b]);ua()?V.eb(a):Va(a)};function Wa(a){this.Za=a-24;this.jb=function(b){y()[this.Za+4>>2>>>0]=b};this.ib=function(b){y()[this.Za+8>>2>>>0]=b};this.$a=function(b,d){this.hb();this.jb(b);this.ib(d)};this.hb=function(){y()[this.Za+16>>2>>>0]=0}}var Xa=0,Ya=0;\r\nfunction Za(a,b,d,e){return G?W(3,1,a,b,d,e):$a(a,b,d,e)}function $a(a,b,d,e){if(\"undefined\"==typeof SharedArrayBuffer)return K(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var h=[];if(G&&0===h.length)return Za(a,b,d,e);a={Ab:d,Sa:a,lb:e,Gb:h};return G?(a.Ib=\"spawnThread\",postMessage(a,h),0):Ga(a)}function ab(a,b,d){return G?W(4,1,a,b,d):0}function bb(a,b){if(G)return W(5,1,a,b)}\r\nfunction cb(a){for(var b=0,d=0;d<a.length;++d){var e=a.charCodeAt(d);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++d):b+=3}return b}\r\nfunction db(a,b,d,e){d>>>=0;if(!(0<e))return 0;var h=d;e=d+e-1;for(var g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&57343>=k){var n=a.charCodeAt(++g);k=65536+((k&1023)<<10)|n&1023}if(127>=k){if(d>=e)break;b[d++>>>0]=k}else{if(2047>=k){if(d+1>=e)break;b[d++>>>0]=192|k>>6}else{if(65535>=k){if(d+2>=e)break;b[d++>>>0]=224|k>>12}else{if(d+3>=e)break;b[d++>>>0]=240|k>>18;b[d++>>>0]=128|k>>12&63}b[d++>>>0]=128|k>>6&63}b[d++>>>0]=128|k&63}}b[d>>>0]=0;return d-h}\r\nfunction eb(a,b,d){return db(a,w(),b,d)}function fb(a,b){if(G)return W(6,1,a,b)}function gb(a,b,d){if(G)return W(7,1,a,b,d)}function hb(a,b,d){return G?W(8,1,a,b,d):0}function ib(a,b){if(G)return W(9,1,a,b)}function jb(a,b,d){if(G)return W(10,1,a,b,d)}function kb(a,b,d,e){if(G)return W(11,1,a,b,d,e)}function lb(a,b,d,e){if(G)return W(12,1,a,b,d,e)}function mb(a,b,d,e){if(G)return W(13,1,a,b,d,e)}function nb(a){if(G)return W(14,1,a)}function ob(a,b){if(G)return W(15,1,a,b)}\r\nfunction pb(a,b,d){if(G)return W(16,1,a,b,d)}function qb(a){if(!O)try{if(a(),!ua())try{G?Va(P):La(P)}catch(b){Na(b)}}catch(b){Na(b)}}function rb(a){\"function\"===typeof Atomics.Hb&&(Atomics.Hb(x(),a>>2,a).value.then(Qa),a+=128,Atomics.store(x(),a>>2,1))}B.__emscripten_thread_mailbox_await=rb;function Qa(){var a=Pa();a&&(rb(a),qb(()=>sb()))}B.checkMailbox=Qa;function tb(a){return y()[a>>>2]+4294967296*x()[a+4>>>2]}function X(a){return 0===a%4&&(0!==a%100||0===a%400)}\r\nvar ub=[0,31,60,91,121,152,182,213,244,274,305,335],vb=[0,31,59,90,120,151,181,212,243,273,304,334];function wb(a){return(X(a.getFullYear())?ub:vb)[a.getMonth()]+a.getDate()-1}function xb(a,b,d,e,h,g,k){return G?W(17,1,a,b,d,e,h,g,k):-52}function yb(a,b,d,e,h,g){if(G)return W(18,1,a,b,d,e,h,g)}function zb(a){var b=cb(a)+1,d=Ab(b);d&&eb(a,d,b);return d}var Bb=[];\r\nfunction Cb(a,b,d){Bb.length=0;var e;for(d>>=2;e=w()[b++>>>0];)d+=105!=e&d,Bb.push(105==e?x()[d>>>0]:da()[d++>>>1]),++d;return Ca[a].apply(null,Bb)}var Db;Db=F?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.timeOrigin+performance.now();function Eb(a){var b=Fb();a=a();Ta(b);return a}function W(a,b){var d=arguments.length-2,e=arguments;return Eb(()=>{for(var h=Gb(8*d),g=h>>3,k=0;k<d;k++){var n=e[2+k];da()[g+k>>>0]=n}return Hb(a,d,h,b)})}var Ib=[],Jb={};\r\nfunction Kb(){if(!Lb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ia||\"./this.program\"},b;for(b in Jb)void 0===Jb[b]?delete a[b]:a[b]=Jb[b];var d=[];for(b in a)d.push(b+\"=\"+a[b]);Lb=d}return Lb}var Lb;\r\nfunction Mb(a,b){if(G)return W(19,1,a,b);var d=0;Kb().forEach(function(e,h){var g=b+d;h=y()[a+4*h>>2>>>0]=g;for(g=0;g<e.length;++g)c()[h++>>0>>>0]=e.charCodeAt(g);c()[h>>0>>>0]=0;d+=e.length+1});return 0}function Nb(a,b){if(G)return W(20,1,a,b);var d=Kb();y()[a>>2>>>0]=d.length;var e=0;d.forEach(function(h){e+=h.length+1});y()[b>>2>>>0]=e;return 0}function Ob(a){return G?W(21,1,a):52}function Pb(a,b,d,e){return G?W(22,1,a,b,d,e):52}function Qb(a,b,d,e,h){return G?W(23,1,a,b,d,e,h):70}\r\nvar Sb=[null,[],[]];function Tb(a,b,d,e){if(G)return W(24,1,a,b,d,e);for(var h=0,g=0;g<d;g++){var k=y()[b>>2>>>0],n=y()[b+4>>2>>>0];b+=8;for(var v=0;v<n;v++){var r=w()[k+v>>>0],u=Sb[a];0===r||10===r?((1===a?pa:K)(Ia(u,0)),u.length=0):u.push(r)}h+=n}y()[e>>2>>>0]=h;return 0}\r\nfunction Ub(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return d=>(d.set(crypto.getRandomValues(new Uint8Array(d.byteLength))),d);if(F)try{var a=require(\"crypto\");if(a.randomFillSync)return d=>a.randomFillSync(d);var b=a.randomBytes;return d=>(d.set(b(d.byteLength)),d)}catch(d){}N(\"initRandomDevice\")}function Vb(a){return(Vb=Ub())(a)}var Wb=[31,29,31,30,31,30,31,31,30,31,30,31],Xb=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Yb(a){var b=Array(cb(a)+1);db(a,b,0,b.length);return b}function Zb(a,b){c().set(a,b>>>0)}\r\nfunction $b(a,b,d,e){function h(f,p,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<p;)f=t[0]+f;return f}function g(f,p){return h(f,p,\"0\")}function k(f,p){function t(Rb){return 0>Rb?-1:0<Rb?1:0}var M;0===(M=t(f.getFullYear()-p.getFullYear()))&&0===(M=t(f.getMonth()-p.getMonth()))&&(M=t(f.getDate()-p.getDate()));return M}function n(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\r\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function v(f){var p=f.Ua;for(f=new Date((new Date(f.Va+1900,0,1)).getTime());0<p;){var t=f.getMonth(),M=(X(f.getFullYear())?Wb:Xb)[t];if(p>M-f.getDate())p-=M-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+p);break}}t=new Date(f.getFullYear()+1,0,4);p=n(new Date(f.getFullYear(),\r\n0,4));t=n(t);return 0>=k(p,f)?0>=k(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var r=x()[e+40>>2>>>0];e={Eb:x()[e>>2>>>0],Db:x()[e+4>>2>>>0],Xa:x()[e+8>>2>>>0],bb:x()[e+12>>2>>>0],Ya:x()[e+16>>2>>>0],Va:x()[e+20>>2>>>0],Ra:x()[e+24>>2>>>0],Ua:x()[e+28>>2>>>0],Nb:x()[e+32>>2>>>0],Cb:x()[e+36>>2>>>0],Fb:r?Ja(r):\"\"};d=Ja(d);r={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\r\n\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in r)d=d.replace(new RegExp(u,\"g\"),r[u]);var z=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),A=\"January February March April May June July August September October November December\".split(\" \");r={\"%a\":function(f){return z[f.Ra].substring(0,3)},\"%A\":function(f){return z[f.Ra]},\r\n\"%b\":function(f){return A[f.Ya].substring(0,3)},\"%B\":function(f){return A[f.Ya]},\"%C\":function(f){return g((f.Va+1900)/100|0,2)},\"%d\":function(f){return g(f.bb,2)},\"%e\":function(f){return h(f.bb,2,\" \")},\"%g\":function(f){return v(f).toString().substring(2)},\"%G\":function(f){return v(f)},\"%H\":function(f){return g(f.Xa,2)},\"%I\":function(f){f=f.Xa;0==f?f=12:12<f&&(f-=12);return g(f,2)},\"%j\":function(f){for(var p=0,t=0;t<=f.Ya-1;p+=(X(f.Va+1900)?Wb:Xb)[t++]);return g(f.bb+p,3)},\"%m\":function(f){return g(f.Ya+\r\n1,2)},\"%M\":function(f){return g(f.Db,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Xa&&12>f.Xa?\"AM\":\"PM\"},\"%S\":function(f){return g(f.Eb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Ra||7},\"%U\":function(f){return g(Math.floor((f.Ua+7-f.Ra)/7),2)},\"%V\":function(f){var p=Math.floor((f.Ua+7-(f.Ra+6)%7)/7);2>=(f.Ra+371-f.Ua-2)%7&&p++;if(p)53==p&&(t=(f.Ra+371-f.Ua)%7,4==t||3==t&&X(f.Va)||(p=1));else{p=52;var t=(f.Ra+7-f.Ua-1)%7;(4==t||5==t&&X(f.Va%400-1))&&p++}return g(p,2)},\r\n\"%w\":function(f){return f.Ra},\"%W\":function(f){return g(Math.floor((f.Ua+7-(f.Ra+6)%7)/7),2)},\"%y\":function(f){return(f.Va+1900).toString().substring(2)},\"%Y\":function(f){return f.Va+1900},\"%z\":function(f){f=f.Cb;var p=0<=f;f=Math.abs(f)/60;return(p?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.Fb},\"%%\":function(){return\"%\"}};d=d.replace(/%%/g,\"\\x00\\x00\");for(u in r)d.includes(u)&&(d=d.replace(new RegExp(u,\"g\"),r[u](e)));d=d.replace(/\\0\\0/g,\"%\");u=Yb(d);if(u.length>\r\nb)return 0;Zb(u,a);return u.length-1}function ac(a){try{a()}catch(b){N(b)}}function bc(a){var b={},d;for(d in a)(function(e){var h=a[e];b[e]=\"function\"==typeof h?function(){cc.push(e);try{return h.apply(null,arguments)}finally{O||(cc.pop()===e||N(),Y&&1===Z&&0===cc.length&&(Z=0,R+=1,ac(dc),\"undefined\"!=typeof Fibers&&Fibers.Ob()))}}:h})(d);return b}var Z=0,Y=null,ec=0,cc=[],fc={},gc={},hc=0,ic=null,jc=[];\r\nfunction kc(){var a=Ab(65548),b=a+12;x()[a>>2>>>0]=b;x()[a+4>>2>>>0]=b+65536;b=cc[0];var d=fc[b];void 0===d&&(d=hc++,fc[b]=d,gc[d]=b);b=d;x()[a+8>>2>>>0]=b;return a}function lc(){var a=x()[Y+8>>2>>>0];a=B.asm[gc[a]];--R;return a()}\r\nfunction mc(a){if(!O){if(0===Z){var b=!1,d=!1;a((e=0)=>{if(!O&&(ec=e,b=!0,d)){Z=2;ac(()=>nc(Y));\"undefined\"!=typeof Browser&&Browser.ab.nb&&Browser.ab.resume();e=!1;try{var h=lc()}catch(n){h=n,e=!0}var g=!1;if(!Y){var k=ic;k&&(ic=null,(e?k.reject:k.resolve)(h),g=!0)}if(e&&!g)throw h;}});d=!0;b||(Z=1,Y=kc(),\"undefined\"!=typeof Browser&&Browser.ab.nb&&Browser.ab.pause(),ac(()=>oc(Y)))}else 2===Z?(Z=0,ac(pc),qc(Y),Y=null,jc.forEach(e=>qb(e))):N(\"invalid state: \"+Z);return ec}}\r\nfunction rc(a){return mc(b=>{a().then(b)})}V.$a();\r\nvar sc=[null,Ka,Ma,Za,ab,bb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,xb,yb,Mb,Nb,Ob,Pb,Qb,Tb],uc={r:function(a,b,d){return rc(async()=>{await B.rb(a,b,d)})},b:function(a,b,d){(new Wa(a)).$a(b,d);Xa=a;Ya++;throw Xa;},$:function(){N(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},Q:function(a){tc(a,!E,1,!ja);V.fb()},l:function(a){G?postMessage({cmd:\"cleanupThread\",thread:a}):Fa(a)},E:$a,i:ab,W:bb,B:fb,D:gb,X:hb,U:ib,L:jb,T:kb,p:lb,C:mb,z:nb,\r\nV:ob,A:pb,F:function(){return 131072},_:function(){return!0},x:function(a,b){a==b?setTimeout(()=>Qa()):G?postMessage({targetThread:a,cmd:\"checkMailbox\"}):(a=V.La[a])&&a.postMessage({cmd:\"checkMailbox\"})},O:function(){return-1},P:rb,Z:function(a){F&&V.La[a].ref()},I:function(a,b){a=new Date(1E3*tb(a));x()[b>>2>>>0]=a.getUTCSeconds();x()[b+4>>2>>>0]=a.getUTCMinutes();x()[b+8>>2>>>0]=a.getUTCHours();x()[b+12>>2>>>0]=a.getUTCDate();x()[b+16>>2>>>0]=a.getUTCMonth();x()[b+20>>2>>>0]=a.getUTCFullYear()-\r\n1900;x()[b+24>>2>>>0]=a.getUTCDay();a=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;x()[b+28>>2>>>0]=a},J:function(a,b){a=new Date(1E3*tb(a));x()[b>>2>>>0]=a.getSeconds();x()[b+4>>2>>>0]=a.getMinutes();x()[b+8>>2>>>0]=a.getHours();x()[b+12>>2>>>0]=a.getDate();x()[b+16>>2>>>0]=a.getMonth();x()[b+20>>2>>>0]=a.getFullYear()-1900;x()[b+24>>2>>>0]=a.getDay();var d=wb(a)|0;x()[b+28>>2>>>0]=d;x()[b+36>>2>>>0]=-(60*a.getTimezoneOffset());d=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();\r\nvar e=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();a=(d!=e&&a.getTimezoneOffset()==Math.min(e,d))|0;x()[b+32>>2>>>0]=a},K:function(a){var b=new Date(x()[a+20>>2>>>0]+1900,x()[a+16>>2>>>0],x()[a+12>>2>>>0],x()[a+8>>2>>>0],x()[a+4>>2>>>0],x()[a>>2>>>0],0),d=x()[a+32>>2>>>0],e=b.getTimezoneOffset(),h=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),g=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(g,h);0>d?x()[a+32>>2>>>0]=Number(h!=g&&k==e):0<d!=(k==e)&&(h=Math.max(g,h),b.setTime(b.getTime()+\r\n6E4*((0<d?k:h)-e)));x()[a+24>>2>>>0]=b.getDay();d=wb(b)|0;x()[a+28>>2>>>0]=d;x()[a>>2>>>0]=b.getSeconds();x()[a+4>>2>>>0]=b.getMinutes();x()[a+8>>2>>>0]=b.getHours();x()[a+12>>2>>>0]=b.getDate();x()[a+16>>2>>>0]=b.getMonth();x()[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},G:xb,H:yb,w:function(a,b,d){function e(r){return(r=r.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?r[1]:\"GMT\"}var h=(new Date).getFullYear(),g=new Date(h,0,1),k=new Date(h,6,1);h=g.getTimezoneOffset();var n=k.getTimezoneOffset(),\r\nv=Math.max(h,n);y()[a>>2>>>0]=60*v;x()[b>>2>>>0]=Number(h!=n);a=e(g);b=e(k);a=zb(a);b=zb(b);n<h?(y()[d>>2>>>0]=a,y()[d+4>>2>>>0]=b):(y()[d>>2>>>0]=b,y()[d+4>>2>>>0]=a)},d:function(){N(\"\")},N:function(){N(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},c:function(a,b,d){return Cb(a,b,d)},k:function(a,b,d){return Cb(a,b,d)},m:function(){},q:function(){return Date.now()},Y:function(){R+=1;throw\"unwind\";},y:function(){return 4294901760},\r\nf:Db,g:function(){return F?require(\"os\").cpus().length:navigator.hardwareConcurrency},M:function(a,b,d){Ib.length=b;d>>=3;for(var e=0;e<b;e++)Ib[e]=da()[d+e>>>0];return(0>a?Ca[-a-1]:sc[a]).apply(null,Ib)},v:function(a){var b=w().length;a>>>=0;if(a<=b||4294901760<a)return!1;for(var d=1;4>=d;d*=2){var e=b*(1+.2/d);e=Math.min(e,a+100663296);var h=Math,g=h.min;e=Math.max(a,e);e+=(65536-e%65536)%65536;a:{var k=l.buffer;try{l.grow(g.call(h,4294901760,e)-k.byteLength+65535>>>16);q();var n=1;break a}catch(v){}n=\r\nvoid 0}if(n)return!0}return!1},R:Mb,S:Nb,j:La,h:Ob,o:Pb,s:Qb,n:Tb,t:function(a,b){Vb(w().subarray(a>>>0,a+b>>>0));return 0},a:l||B.wasmMemory,u:$b,e:function(a,b,d,e){return $b(a,b,d,e)}};\r\n(function(){function a(d,e){d=d.exports;d=bc(d);B.asm=d;V.gb.push(B.asm.za);sa.unshift(B.asm.aa);qa=e;V.wb(()=>{S--;B.monitorRunDependencies&&B.monitorRunDependencies(S);if(0==S&&(null!==wa&&(clearInterval(wa),wa=null),T)){var h=T;T=null;h()}});return d}var b={a:uc};S++;B.monitorRunDependencies&&B.monitorRunDependencies(S);if(B.instantiateWasm)try{return B.instantiateWasm(b,a)}catch(d){K(\"Module.instantiateWasm callback failed with error: \"+d),C(d)}Ba(b,function(d){a(d.instance,d.module)}).catch(C);\r\nreturn{}})();B._OrtInit=function(){return(B._OrtInit=B.asm.ba).apply(null,arguments)};B._OrtCreateSessionOptions=function(){return(B._OrtCreateSessionOptions=B.asm.ca).apply(null,arguments)};B._OrtAppendExecutionProvider=function(){return(B._OrtAppendExecutionProvider=B.asm.da).apply(null,arguments)};B._OrtAddSessionConfigEntry=function(){return(B._OrtAddSessionConfigEntry=B.asm.ea).apply(null,arguments)};\r\nB._OrtReleaseSessionOptions=function(){return(B._OrtReleaseSessionOptions=B.asm.fa).apply(null,arguments)};B._OrtCreateSession=function(){return(B._OrtCreateSession=B.asm.ga).apply(null,arguments)};B._OrtReleaseSession=function(){return(B._OrtReleaseSession=B.asm.ha).apply(null,arguments)};B._OrtGetInputCount=function(){return(B._OrtGetInputCount=B.asm.ia).apply(null,arguments)};B._OrtGetOutputCount=function(){return(B._OrtGetOutputCount=B.asm.ja).apply(null,arguments)};\r\nB._OrtGetInputName=function(){return(B._OrtGetInputName=B.asm.ka).apply(null,arguments)};B._OrtGetOutputName=function(){return(B._OrtGetOutputName=B.asm.la).apply(null,arguments)};B._OrtFree=function(){return(B._OrtFree=B.asm.ma).apply(null,arguments)};B._OrtCreateTensor=function(){return(B._OrtCreateTensor=B.asm.na).apply(null,arguments)};B._OrtGetTensorData=function(){return(B._OrtGetTensorData=B.asm.oa).apply(null,arguments)};\r\nB._OrtReleaseTensor=function(){return(B._OrtReleaseTensor=B.asm.pa).apply(null,arguments)};B._OrtCreateRunOptions=function(){return(B._OrtCreateRunOptions=B.asm.qa).apply(null,arguments)};B._OrtAddRunConfigEntry=function(){return(B._OrtAddRunConfigEntry=B.asm.ra).apply(null,arguments)};B._OrtReleaseRunOptions=function(){return(B._OrtReleaseRunOptions=B.asm.sa).apply(null,arguments)};B._OrtRun=function(){return(B._OrtRun=B.asm.ta).apply(null,arguments)};\r\nB._OrtEndProfiling=function(){return(B._OrtEndProfiling=B.asm.ua).apply(null,arguments)};B._JsepOutput=function(){return(B._JsepOutput=B.asm.va).apply(null,arguments)};var Pa=B._pthread_self=function(){return(Pa=B._pthread_self=B.asm.wa).apply(null,arguments)},Ab=B._malloc=function(){return(Ab=B._malloc=B.asm.xa).apply(null,arguments)},qc=B._free=function(){return(qc=B._free=B.asm.ya).apply(null,arguments)};B.__emscripten_tls_init=function(){return(B.__emscripten_tls_init=B.asm.za).apply(null,arguments)};\r\nvar tc=B.__emscripten_thread_init=function(){return(tc=B.__emscripten_thread_init=B.asm.Ba).apply(null,arguments)};B.__emscripten_thread_crashed=function(){return(B.__emscripten_thread_crashed=B.asm.Ca).apply(null,arguments)};function Hb(){return(Hb=B.asm.Da).apply(null,arguments)}function Oa(){return(Oa=B.asm.Ea).apply(null,arguments)}\r\nvar Va=B.__emscripten_thread_exit=function(){return(Va=B.__emscripten_thread_exit=B.asm.Fa).apply(null,arguments)},sb=B.__emscripten_check_mailbox=function(){return(sb=B.__emscripten_check_mailbox=B.asm.Ga).apply(null,arguments)};function Sa(){return(Sa=B.asm.Ha).apply(null,arguments)}function Fb(){return(Fb=B.asm.Ia).apply(null,arguments)}function Ta(){return(Ta=B.asm.Ja).apply(null,arguments)}function Gb(){return(Gb=B.asm.Ka).apply(null,arguments)}\r\nvar Ua=B.dynCall_ii=function(){return(Ua=B.dynCall_ii=B.asm.Ma).apply(null,arguments)};function oc(){return(oc=B.asm.Na).apply(null,arguments)}function dc(){return(dc=B.asm.Oa).apply(null,arguments)}function nc(){return(nc=B.asm.Pa).apply(null,arguments)}function pc(){return(pc=B.asm.Qa).apply(null,arguments)}B.___start_em_js=892345;B.___stop_em_js=892506;B.keepRuntimeAlive=ua;B.wasmMemory=l;B.stackAlloc=Gb;B.stackSave=Fb;B.stackRestore=Ta;B.UTF8ToString=Ja;B.stringToUTF8=eb;B.lengthBytesUTF8=cb;\r\nB.ExitStatus=Da;B.PThread=V;var vc;T=function wc(){vc||xc();vc||(T=wc)};\r\nfunction xc(){function a(){if(!vc&&(vc=!0,B.calledRun=!0,!O)){G||Ra(sa);fa(B);if(B.onRuntimeInitialized)B.onRuntimeInitialized();if(!G){if(B.postRun)for(\"function\"==typeof B.postRun&&(B.postRun=[B.postRun]);B.postRun.length;){var b=B.postRun.shift();ta.unshift(b)}Ra(ta)}}}if(!(0<S))if(G)fa(B),G||Ra(sa),startWorker(B);else{if(B.preRun)for(\"function\"==typeof B.preRun&&(B.preRun=[B.preRun]);B.preRun.length;)va();Ra(ra);0<S||(B.setStatus?(B.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){B.setStatus(\"\")},\r\n1);a()},1)):a())}}if(B.preInit)for(\"function\"==typeof B.preInit&&(B.preInit=[B.preInit]);0<B.preInit.length;)B.preInit.pop()();xc();\r\n\r\n\r\n  return ortWasmThreaded.ready\r\n}\r\n\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasmThreaded;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasmThreaded; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasmThreaded\"] = ortWasmThreaded;\r\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm = {})  {\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,k;c.ready=new Promise((a,b)=>{aa=a;k=b});\"use strict\";c.jsepInit=function(a,b,d,f,g,h,l,n){c.Ta=a;c.Fa=b;c.Ha=d;c.Da=f;c.Ga=g;c.na=h;c.Ia=l;c.Ja=n};var ba=Object.assign({},c),u=\"./this.program\",x=(a,b)=>{throw b;},ca=\"object\"==typeof window,y=\"function\"==typeof importScripts,z=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,A=\"\",B,C,D;\r\nif(z){var fs=require(\"fs\"),E=require(\"path\");A=y?E.dirname(A)+\"/\":__dirname+\"/\";B=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):E.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};D=a=>{a=B(a,!0);a.buffer||(a=new Uint8Array(a));return a};C=(a,b,d,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):E.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,h)=>{g?d(g):b(f?h.buffer:h)})};!c.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);x=(a,b)=>{process.exitCode=\r\na;throw b;};c.inspect=()=>\"[Emscripten Module object]\"}else if(ca||y)y?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),0!==A.indexOf(\"blob:\")?A=A.substr(0,A.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):A=\"\",B=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},y&&(D=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\r\nC=(a,b,d)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):d()};f.onerror=d;f.send(null)};var da=c.print||console.log.bind(console),G=c.printErr||console.warn.bind(console);Object.assign(c,ba);ba=null;c.thisProgram&&(u=c.thisProgram);c.quit&&(x=c.quit);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&I(\"no native wasm support detected\");\r\nvar J,K=!1,L,M,N,O,P,ea;function fa(){var a=J.buffer;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=O=new Int32Array(a);c.HEAPU8=N=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=P=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=ea=new Float64Array(a)}var ha=[],ia=[],ja=[];function ka(){var a=c.preRun.shift();ha.unshift(a)}var Q=0,R=null,S=null;\r\nfunction I(a){if(c.onAbort)c.onAbort(a);a=\"Aborted(\"+a+\")\";G(a);K=!0;L=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");k(a);throw a;}function la(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var T;T=\"ort-wasm-simd.wasm\";if(!la(T)){var ma=T;T=c.locateFile?c.locateFile(ma,A):A+ma}function na(a){try{if(a==T&&H)return new Uint8Array(H);if(D)return D(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){I(b)}}\r\nfunction oa(a){if(!H&&(ca||y)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>na(a));if(C)return new Promise((b,d)=>{C(a,f=>b(new Uint8Array(f)),d)})}return Promise.resolve().then(()=>na(a))}function pa(a,b,d){return oa(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(d,f=>{G(\"failed to asynchronously prepare wasm: \"+f);I(f)})}\r\nfunction qa(a,b){var d=T;return H||\"function\"!=typeof WebAssembly.instantiateStreaming||la(d)||d.startsWith(\"file://\")||z||\"function\"!=typeof fetch?pa(d,a,b):fetch(d,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){G(\"wasm streaming compile failed: \"+g);G(\"falling back to ArrayBuffer instantiation\");return pa(d,a,b)}))}\r\nvar ra={883936:()=>{c.jsepRunPromise=new Promise(function(a){c.Ka=a})},884031:a=>{c.Ka(a)},884069:a=>c.Fa(a),884102:a=>c.Ha(a),884134:(a,b,d)=>{c.Da(a,b,d,!0)},884173:(a,b,d)=>{c.Da(a,b,d)},884206:a=>{c.na(\"Abs\",a,void 0)},884257:a=>{c.na(\"Neg\",a,void 0)},884308:a=>{c.na(\"Floor\",a,void 0)},884361:a=>{c.na(\"Ceil\",a,void 0)},884413:a=>{c.na(\"Reciprocal\",a,void 0)},884471:a=>{c.na(\"Sqrt\",a,void 0)},884523:a=>{c.na(\"Exp\",a,void 0)},884574:a=>{c.na(\"Erf\",a,void 0)},884625:a=>{c.na(\"Sigmoid\",a,void 0)},\r\n884680:a=>{c.na(\"Sin\",a,void 0)},884731:a=>{c.na(\"Cos\",a,void 0)},884782:a=>{c.na(\"Tan\",a,void 0)},884833:a=>{c.na(\"Asin\",a,void 0)},884885:a=>{c.na(\"Acos\",a,void 0)},884937:a=>{c.na(\"Atan\",a,void 0)},884989:a=>{c.na(\"Sinh\",a,void 0)},885041:a=>{c.na(\"Cosh\",a,void 0)},885093:a=>{c.na(\"Asinh\",a,void 0)},885146:a=>{c.na(\"Acosh\",a,void 0)},885199:a=>{c.na(\"Atanh\",a,void 0)},885252:(a,b,d)=>{c.na(\"ClipV10\",a,{min:b,max:d})},885324:a=>{c.na(\"Clip\",a,void 0)},885376:(a,b)=>{c.na(\"Elu\",a,{alpha:b})},885434:a=>\r\n{c.na(\"Relu\",a,void 0)},885486:(a,b)=>{c.na(\"LeakyRelu\",a,{alpha:b})},885550:(a,b)=>{c.na(\"ThresholdedRelu\",a,{alpha:b})},885620:a=>{c.na(\"Add\",a,void 0)},885671:a=>{c.na(\"Sub\",a,void 0)},885722:a=>{c.na(\"Mul\",a,void 0)},885773:a=>{c.na(\"Div\",a,void 0)},885824:a=>{c.na(\"Pow\",a,void 0)},885875:(a,b,d)=>{c.na(\"Transpose\",a,{perm:b?Array.from(O.subarray(d>>>0,d+b>>>0)):[]})},885988:(a,b,d,f,g,h,l,n,r,q)=>{c.na(\"Conv\",a,{format:r?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d],group:f,kernel_shape:[g],pads:[h,\r\nl],strides:[n],w_is_const:()=>!!M[q>>>0]})},886216:(a,b,d,f,g,h,l,n,r,q,t,v,w,e,m)=>{c.na(\"Conv\",a,{format:e?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d,f],group:g,kernel_shape:[h,l],pads:[n,r,q,t],strides:[v,w],w_is_const:()=>!!M[m>>>0]})},886475:(a,b,d,f,g,h,l,n,r,q)=>{c.na(\"Conv\",a,{format:r?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d],group:f,kernel_shape:[g],pads:[h,l],strides:[n],w_is_const:()=>!!M[q>>>0]})},886703:(a,b,d,f,g,h,l,n,r,q,t,v,w,e,m)=>{c.na(\"Conv\",a,{format:e?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[d,\r\nf],group:g,kernel_shape:[h,l],pads:[n,r,q,t],strides:[v,w],w_is_const:()=>!!M[m>>>0]})},886962:(a,b)=>{c.na(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},887053:(a,b,d,f,g,h,l,n,r,q,t,v,w,e,m,p)=>{c.na(\"AveragePool\",a,{format:p?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:f,storage_order:g,dilations:[h,l],kernel_shape:[n,r],pads:[q,t,v,w],strides:[e,m]})},887337:(a,b)=>{c.na(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},887428:(a,b,d,f,g,h,l,n,r,q,t,v,w,e,m,p)=>{c.na(\"AveragePool\",\r\na,{format:p?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:f,storage_order:g,dilations:[h,l],kernel_shape:[n,r],pads:[q,t,v,w],strides:[e,m]})},887712:(a,b)=>{c.na(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},887799:(a,b,d,f,g,h,l,n,r,q,t,v,w,e,m,p)=>{c.na(\"MaxPool\",a,{format:p?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:f,storage_order:g,dilations:[h,l],kernel_shape:[n,r],pads:[q,t,v,w],strides:[e,m]})},888079:(a,b)=>{c.na(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},888166:(a,\r\nb,d,f,g,h,l,n,r,q,t,v,w,e,m,p)=>{c.na(\"MaxPool\",a,{format:p?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:d,count_include_pad:f,storage_order:g,dilations:[h,l],kernel_shape:[n,r],pads:[q,t,v,w],strides:[e,m]})},888446:(a,b,d,f,g)=>{c.na(\"Gemm\",a,{alpha:b,beta:d,transA:f,transB:g})},888550:a=>{c.na(\"MatMul\",a,void 0)},888604:a=>{c.Ia(a)},888638:(a,b)=>c.Ja(a,b)};function sa(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction ta(a){for(;0<a.length;)a.shift()(c)}function ua(a){this.Ba=a-24;this.Sa=function(b){P[this.Ba+4>>2>>>0]=b};this.Ra=function(b){P[this.Ba+8>>2>>>0]=b};this.La=function(b,d){this.Qa();this.Sa(b);this.Ra(d)};this.Qa=function(){P[this.Ba+16>>2>>>0]=0}}var va=0,wa=0,xa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ya(a,b,d){b>>>=0;var f=b+d;for(d=b;a[d]&&!(d>=f);)++d;if(16<d-b&&a.buffer&&xa)return xa.decode(a.subarray(b,d));for(f=\"\";b<d;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function za(a,b){return(a>>>=0)?ya(N,a,b):\"\"}\r\nfunction Aa(a){for(var b=0,d=0;d<a.length;++d){var f=a.charCodeAt(d);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++d):b+=3}return b}\r\nfunction Ba(a,b,d,f){d>>>=0;if(!(0<f))return 0;var g=d;f=d+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var n=a.charCodeAt(++h);l=65536+((l&1023)<<10)|n&1023}if(127>=l){if(d>=f)break;b[d++>>>0]=l}else{if(2047>=l){if(d+1>=f)break;b[d++>>>0]=192|l>>6}else{if(65535>=l){if(d+2>=f)break;b[d++>>>0]=224|l>>12}else{if(d+3>=f)break;b[d++>>>0]=240|l>>18;b[d++>>>0]=128|l>>12&63}b[d++>>>0]=128|l>>6&63}b[d++>>>0]=128|l&63}}b[d>>>0]=0;return d-g}\r\nfunction Ca(a,b,d){return Ba(a,N,b,d)}function U(a){return 0===a%4&&(0!==a%100||0===a%400)}var Da=[0,31,60,91,121,152,182,213,244,274,305,335],Ea=[0,31,59,90,120,151,181,212,243,273,304,334];function Fa(a){return(U(a.getFullYear())?Da:Ea)[a.getMonth()]+a.getDate()-1}function Ga(a){var b=Aa(a)+1,d=Ha(b);d&&Ca(a,d,b);return d}var Ia=[];function Ka(a,b,d){Ia.length=0;var f;for(d>>=2;f=N[b++>>>0];)d+=105!=f&d,Ia.push(105==f?O[d>>>0]:ea[d++>>>1]),++d;return ra[a].apply(null,Ia)}var La={};\r\nfunction Ma(){if(!Na){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:u||\"./this.program\"},b;for(b in La)void 0===La[b]?delete a[b]:a[b]=La[b];var d=[];for(b in a)d.push(b+\"=\"+a[b]);Na=d}return Na}var Na;function Oa(a){L=L=a;if(!noExitRuntime){if(c.onExit)c.onExit(a);K=!0}x(a,new sa(a))}var Pa=[null,[],[]];\r\nfunction Qa(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return d=>crypto.getRandomValues(d);if(z)try{var a=require(\"crypto\");if(a.randomFillSync)return d=>a.randomFillSync(d);var b=a.randomBytes;return d=>(d.set(b(d.byteLength)),d)}catch(d){}I(\"initRandomDevice\")}function Ra(a){return(Ra=Qa())(a)}var Sa=[31,29,31,30,31,30,31,31,30,31,30,31],Ta=[31,28,31,30,31,30,31,31,30,31,30,31];function Ua(a){var b=Array(Aa(a)+1);Ba(a,b,0,b.length);return b}\r\nfunction Va(a,b,d,f){function g(e,m,p){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<m;)e=p[0]+e;return e}function h(e,m){return g(e,m,\"0\")}function l(e,m){function p(Ja){return 0>Ja?-1:0<Ja?1:0}var F;0===(F=p(e.getFullYear()-m.getFullYear()))&&0===(F=p(e.getMonth()-m.getMonth()))&&(F=p(e.getDate()-m.getDate()));return F}function n(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),\r\n0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function r(e){var m=e.wa;for(e=new Date((new Date(e.xa+1900,0,1)).getTime());0<m;){var p=e.getMonth(),F=(U(e.getFullYear())?Sa:Ta)[p];if(m>F-e.getDate())m-=F-e.getDate()+1,e.setDate(1),11>p?e.setMonth(p+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1));else{e.setDate(e.getDate()+m);break}}p=new Date(e.getFullYear()+1,0,4);m=n(new Date(e.getFullYear(),\r\n0,4));p=n(p);return 0>=l(m,e)?0>=l(p,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var q=O[f+40>>2>>>0];f={Oa:O[f>>2>>>0],Na:O[f+4>>2>>>0],ya:O[f+8>>2>>>0],Ca:O[f+12>>2>>>0],za:O[f+16>>2>>>0],xa:O[f+20>>2>>>0],ra:O[f+24>>2>>>0],wa:O[f+28>>2>>>0],Ua:O[f+32>>2>>>0],Ma:O[f+36>>2>>>0],Pa:q?za(q):\"\"};d=za(d);q={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var t in q)d=d.replace(new RegExp(t,\"g\"),q[t]);var v=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),w=\"January February March April May June July August September October November December\".split(\" \");q={\"%a\":function(e){return v[e.ra].substring(0,3)},\"%A\":function(e){return v[e.ra]},\"%b\":function(e){return w[e.za].substring(0,\r\n3)},\"%B\":function(e){return w[e.za]},\"%C\":function(e){return h((e.xa+1900)/100|0,2)},\"%d\":function(e){return h(e.Ca,2)},\"%e\":function(e){return g(e.Ca,2,\" \")},\"%g\":function(e){return r(e).toString().substring(2)},\"%G\":function(e){return r(e)},\"%H\":function(e){return h(e.ya,2)},\"%I\":function(e){e=e.ya;0==e?e=12:12<e&&(e-=12);return h(e,2)},\"%j\":function(e){for(var m=0,p=0;p<=e.za-1;m+=(U(e.xa+1900)?Sa:Ta)[p++]);return h(e.Ca+m,3)},\"%m\":function(e){return h(e.za+1,2)},\"%M\":function(e){return h(e.Na,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.ya&&12>e.ya?\"AM\":\"PM\"},\"%S\":function(e){return h(e.Oa,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ra||7},\"%U\":function(e){return h(Math.floor((e.wa+7-e.ra)/7),2)},\"%V\":function(e){var m=Math.floor((e.wa+7-(e.ra+6)%7)/7);2>=(e.ra+371-e.wa-2)%7&&m++;if(m)53==m&&(p=(e.ra+371-e.wa)%7,4==p||3==p&&U(e.xa)||(m=1));else{m=52;var p=(e.ra+7-e.wa-1)%7;(4==p||5==p&&U(e.xa%400-1))&&m++}return h(m,2)},\"%w\":function(e){return e.ra},\"%W\":function(e){return h(Math.floor((e.wa+\r\n7-(e.ra+6)%7)/7),2)},\"%y\":function(e){return(e.xa+1900).toString().substring(2)},\"%Y\":function(e){return e.xa+1900},\"%z\":function(e){e=e.Ma;var m=0<=e;e=Math.abs(e)/60;return(m?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Pa},\"%%\":function(){return\"%\"}};d=d.replace(/%%/g,\"\\x00\\x00\");for(t in q)d.includes(t)&&(d=d.replace(new RegExp(t,\"g\"),q[t](f)));d=d.replace(/\\0\\0/g,\"%\");t=Ua(d);if(t.length>b)return 0;M.set(t,a>>>0);return t.length-1}\r\nfunction V(a){try{a()}catch(b){I(b)}}function Wa(a){a instanceof sa||\"unwind\"==a||x(1,a)}function Xa(a){var b={},d;for(d in a)(function(f){var g=a[f];b[f]=\"function\"==typeof g?function(){W.push(f);try{return g.apply(null,arguments)}finally{K||(W.pop()===f||I(),X&&1===Y&&0===W.length&&(Y=0,V(Ya),\"undefined\"!=typeof Fibers&&Fibers.Va()))}}:g})(d);return b}var Y=0,X=null,Za=0,W=[],$a={},ab={},bb=0,cb=null,db=[];\r\nfunction eb(){var a=Ha(65548),b=a+12;O[a>>2>>>0]=b;O[a+4>>2>>>0]=b+65536;b=W[0];var d=$a[b];void 0===d&&(d=bb++,$a[b]=d,ab[d]=b);O[a+8>>2>>>0]=d;return a}\r\nfunction fb(a){if(!K){if(0===Y){var b=!1,d=!1;a((f=0)=>{if(!K&&(Za=f,b=!0,d)){Y=2;V(()=>gb(X));\"undefined\"!=typeof Browser&&Browser.Aa.Ea&&Browser.Aa.resume();f=!1;try{var g=(0,c.asm[ab[O[X+8>>2>>>0]]])()}catch(n){g=n,f=!0}var h=!1;if(!X){var l=cb;l&&(cb=null,(f?l.reject:l.resolve)(g),h=!0)}if(f&&!h)throw g;}});d=!0;b||(Y=1,X=eb(),\"undefined\"!=typeof Browser&&Browser.Aa.Ea&&Browser.Aa.pause(),V(()=>hb(X)))}else 2===Y?(Y=0,V(ib),jb(X),X=null,db.forEach(f=>{if(!K)try{if(f(),!noExitRuntime)try{Oa(L)}catch(g){Wa(g)}}catch(g){Wa(g)}})):\r\nI(\"invalid state: \"+Y);return Za}}function kb(a){return fb(b=>{a().then(b)})}\r\nvar lb={o:function(a,b,d){return kb(async()=>{await c.Ga(a,b,d)})},a:function(a,b,d){(new ua(a)).La(b,d);va=a;wa++;throw va;},m:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},g:function(){return 0},M:function(){},x:function(){},z:function(){},O:function(){return 0},K:function(){},G:function(){},J:function(){},k:function(){},y:function(){},v:function(){},L:function(){},w:function(){},P:function(){return!0},D:function(a,\r\nb){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[b>>2>>>0]=a.getUTCSeconds();O[b+4>>2>>>0]=a.getUTCMinutes();O[b+8>>2>>>0]=a.getUTCHours();O[b+12>>2>>>0]=a.getUTCDate();O[b+16>>2>>>0]=a.getUTCMonth();O[b+20>>2>>>0]=a.getUTCFullYear()-1900;O[b+24>>2>>>0]=a.getUTCDay();O[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},E:function(a,b){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[b>>2>>>0]=a.getSeconds();O[b+4>>2>>>0]=a.getMinutes();O[b+8>>2>>>0]=a.getHours();O[b+\r\n12>>2>>>0]=a.getDate();O[b+16>>2>>>0]=a.getMonth();O[b+20>>2>>>0]=a.getFullYear()-1900;O[b+24>>2>>>0]=a.getDay();O[b+28>>2>>>0]=Fa(a)|0;O[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var d=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();O[b+32>>2>>>0]=(d!=f&&a.getTimezoneOffset()==Math.min(f,d))|0},F:function(a){var b=new Date(O[a+20>>2>>>0]+1900,O[a+16>>2>>>0],O[a+12>>2>>>0],O[a+8>>2>>>0],O[a+4>>2>>>0],O[a>>2>>>0],0),d=O[a+32>>2>>>0],f=b.getTimezoneOffset(),\r\ng=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(h,g);0>d?O[a+32>>2>>>0]=Number(g!=h&&l==f):0<d!=(l==f)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<d?l:g)-f)));O[a+24>>2>>>0]=b.getDay();O[a+28>>2>>>0]=Fa(b)|0;O[a>>2>>>0]=b.getSeconds();O[a+4>>2>>>0]=b.getMinutes();O[a+8>>2>>>0]=b.getHours();O[a+12>>2>>>0]=b.getDate();O[a+16>>2>>>0]=b.getMonth();O[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},A:function(){return-52},C:function(){},\r\nt:function(a,b,d){function f(r){return(r=r.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?r[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var n=l.getTimezoneOffset();P[a>>2>>>0]=60*Math.max(g,n);O[b>>2>>>0]=Number(g!=n);a=f(h);b=f(l);a=Ga(a);b=Ga(b);n<g?(P[d>>2>>>0]=a,P[d+4>>2>>>0]=b):(P[d>>2>>>0]=b,P[d+4>>2>>>0]=a)},e:function(){I(\"\")},B:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},\r\nb:function(a,b,d){return Ka(a,b,d)},h:function(a,b,d){return Ka(a,b,d)},l:function(){return Date.now()},u:function(){return 4294901760},d:z?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),N:function(a,b,d){N.copyWithin(a>>>0,b>>>0,b+d>>>0)},s:function(a){var b=N.length;a>>>=0;if(4294901760<a)return!1;for(var d=1;4>=d;d*=2){var f=b*(1+.2/d);f=Math.min(f,a+100663296);var g=Math,h=g.min;f=Math.max(a,f);f+=(65536-f%65536)%65536;a:{var l=J.buffer;try{J.grow(h.call(g,4294901760,\r\nf)-l.byteLength+65535>>>16);fa();var n=1;break a}catch(r){}n=void 0}if(n)return!0}return!1},H:function(a,b){var d=0;Ma().forEach(function(f,g){var h=b+d;g=P[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)M[g++>>0>>>0]=f.charCodeAt(h);M[g>>0>>>0]=0;d+=f.length+1});return 0},I:function(a,b){var d=Ma();P[a>>2>>>0]=d.length;var f=0;d.forEach(function(g){f+=g.length+1});P[b>>2>>>0]=f;return 0},n:Oa,f:function(){return 52},j:function(){return 52},p:function(){return 70},i:function(a,b,d,f){for(var g=0,h=0;h<d;h++){var l=\r\nP[b>>2>>>0],n=P[b+4>>2>>>0];b+=8;for(var r=0;r<n;r++){var q=N[l+r>>>0],t=Pa[a];0===q||10===q?((1===a?da:G)(ya(t,0)),t.length=0):t.push(q)}g+=n}P[f>>2>>>0]=g;return 0},q:function(a,b){Ra(N.subarray(a>>>0,a+b>>>0));return 0},r:Va,c:function(a,b,d,f){return Va(a,b,d,f)}};\r\n(function(){function a(d){d=d.exports;d=Xa(d);c.asm=d;J=c.asm.Q;fa();ia.unshift(c.asm.R);Q--;c.monitorRunDependencies&&c.monitorRunDependencies(Q);if(0==Q&&(null!==R&&(clearInterval(R),R=null),S)){var f=S;S=null;f()}return d}var b={a:lb};Q++;c.monitorRunDependencies&&c.monitorRunDependencies(Q);if(c.instantiateWasm)try{return c.instantiateWasm(b,a)}catch(d){G(\"Module.instantiateWasm callback failed with error: \"+d),k(d)}qa(b,function(d){a(d.instance)}).catch(k);return{}})();\r\nc._OrtInit=function(){return(c._OrtInit=c.asm.S).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.T).apply(null,arguments)};c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.U).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.V).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.W).apply(null,arguments)};\r\nc._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.X).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Y).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Z).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm._).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.$).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.aa).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.ba).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.ca).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.da).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.ea).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.fa).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ga).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ha).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ia).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.ja).apply(null,arguments)};\r\nc._JsepOutput=function(){return(c._JsepOutput=c.asm.ka).apply(null,arguments)};var Ha=c._malloc=function(){return(Ha=c._malloc=c.asm.la).apply(null,arguments)},jb=c._free=function(){return(jb=c._free=c.asm.ma).apply(null,arguments)};function mb(){return(mb=c.asm.oa).apply(null,arguments)}function nb(){return(nb=c.asm.pa).apply(null,arguments)}function ob(){return(ob=c.asm.qa).apply(null,arguments)}function hb(){return(hb=c.asm.sa).apply(null,arguments)}\r\nfunction Ya(){return(Ya=c.asm.ta).apply(null,arguments)}function gb(){return(gb=c.asm.ua).apply(null,arguments)}function ib(){return(ib=c.asm.va).apply(null,arguments)}c.___start_em_js=888673;c.___stop_em_js=888834;c.stackAlloc=ob;c.stackSave=mb;c.stackRestore=nb;c.UTF8ToString=za;c.stringToUTF8=Ca;c.lengthBytesUTF8=Aa;var Z;S=function pb(){Z||qb();Z||(S=pb)};\r\nfunction qb(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!K)){ta(ia);aa(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();ja.unshift(b)}ta(ja)}}if(!(0<Q)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ka();ta(ha);0<Q||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();qb();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","logLevelValue","env","wasm","webgl","webgpu","logLevel","value","Object","defineProperty","enumerable","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","Tensor","constructor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","this","static","buffer","options","height","width","tensorLayout","norm","mean","bias","normMean","normBias","inputformat","bitmapFormat","outputformat","tensorFormat","stride","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isString","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toDataURL","j","R","G","B","A","fillStyle","fillRect","toImageData","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initTimeout","simd","proxy","numThreads","isInteger","numCpuLogicalCores","navigator","cpus","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","OnnxruntimeWebAssemblySessionHandler","onnxjsBackend","wasmBackend","gpu","AttributeWithCacheKeyImpl","attribute","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","onnx","AttributeProto","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","obj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","version","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","a","c","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","build","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","len","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","bind","logInternal","stack","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","response","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","FLOAT16","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","kernelCustomData","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","getTargetBuffer","download","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","TensorViewImpl","getFloat32Array","HEAP8","newDims","ComputeContextImpl","customData","contextDataOffset","heapU32","HEAPU32","opKernelContext","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","isSourceGpu","HEAPU8","dataOffset","logLevelPrefix","configLogLevel","$configLogLevel","$debug","LOG","messageLevel","logLevelStringToEnum","level","args","isChannelLast","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","acosh","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","parseGlobalMaxPoolAttributes","reciprocal","sinh","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","outputSize","vectorize","sharedDimension","dimA","shaderHelper","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","o2iImpl","iType","assignment","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","getActicationSnippet","inputStorageBuffersDeclarations","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","weightTransposeAttribute","auto_pad","kernel_shape","wIsConst","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","activation_params","calculateAlpha","calculateC","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","permAttr","inputIndicesHelper","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","startTimeU64","endTimeU64","profilingTimeBase","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","iterateExtraOptions","prefix","seen","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","extra","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","path","modelData","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","dataLength","lengthBytesUTF8","_malloc","stringToUTF8","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","loggingLevel","errorCode","_OrtInit","initOrt","activeSessions","modelDataOffset","sessionHandle","_OrtCreateSession","_OrtGetInputCount","outputCount","_OrtGetOutputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","HEAP32","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","scriptSourceCode","what","race","PThread","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","_scriptDir","ortWasmThreaded","l","q","aa","ba","da","ea","fa","ready","h","Kb","qb","sb","cb","rb","Aa","tb","ub","la","I","J","ha","ia","ja","E","importScripts","F","process","versions","ENVIRONMENT_IS_PTHREAD","H","ka","fs","ma","dirname","__dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onerror","na","oa","warn","writeSync","L","pa","print","printErr","quit","wasmBinary","noExitRuntime","qa","P","O","HEAP16","HEAPU16","HEAPF32","HEAPF64","Q","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","ra","sa","ta","ua","va","preRun","U","S","wa","T","onAbort","RuntimeError","xa","ya","credentials","ok","catch","za","instantiate","Ca","vb","u","Da","Ea","Fa","V","La","zb","Ga","ob","Ta","Sa","cmd","start_routine","Ab","lb","pthread_ptr","unref","Gb","Ha","Ia","String","fromCharCode","Ja","Ka","W","Bb","onExit","Ma","Na","Wa","gb","$a","pb","Jb","receiveObjectTransfer","yb","threadInitTLS","setExitStatus","eb","Mb","Oa","xb","mb","targetThread","Pa","Lb","transferList","Qa","thread","loaded","threadId","text","alert","filename","lineno","on","handlers","urlOrBlob","wasmModule","wb","kb","Ra","Za","jb","ib","hb","Ib","ab","charCodeAt","db","nb","Va","Atomics","Hb","store","establishStackSpace","invokeEntryPoint","Ua","apply","__emscripten_thread_mailbox_await","checkMailbox","getFullYear","getMonth","getDate","Db","Cb","arguments","Fb","Eb","hrtime","timeOrigin","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Nb","Ob","Pb","Qb","Sb","Tb","Vb","crypto","getRandomValues","randomFillSync","randomBytes","Ub","Wb","Xb","$b","Rb","getDay","getTime","setDate","setMonth","setFullYear","Xa","Ya","includes","Yb","Zb","ac","Z","Y","ec","cc","fc","gc","hc","ic","jc","mc","nc","Browser","resume","asm","lc","kc","pause","oc","pc","qc","sc","uc","rc","$","tc","ref","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","toTimeString","grow","dc","Fibers","bc","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","Ba","instance","ga","_pthread_self","__emscripten_tls_init","__emscripten_thread_init","__emscripten_thread_crashed","__emscripten_thread_exit","__emscripten_check_mailbox","vc","dynCall_ii","xc","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","___start_em_js","___stop_em_js","keepRuntimeAlive","ExitStatus","wc","preInit","ortWasm","copyWithin","fn","pending","base64","string","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","toJSON","Instance","Module","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}